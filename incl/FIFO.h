/***************************************************************************************
函数库：FIFO.C
原始版本号：V1.0
创始人：熊强
更新版本号：V1.0
更新说明：
更新人：
***************************************************************************************/


#ifndef _FIFO_H
#define _FIFO_H
#include <stdint.h>
#include <stdlib.h>
//#include "config.h"

#define OneCircle     1//表示写指针或读指针已经循环了一圈
#define ZeroCircle    0//表示写指针或读指针没有循环一圈，或则两者都已经过了一圈
#define NOMORENUM     0//表示没有多余的空间
#define WriteSuccess  1//成功将数据写入FIFO
#define ReadSuccess   1//成功从FIFO读出数据

typedef struct _FIFO
{
    uint8_t   *pFirst;//指向FIFO的首地址
    uint8_t    *pLast; //指向FIFO的末地址
    uint8_t    *pCurrentData;//该变量没有使用
    uint32_t  Length;//FIFO的总长度

    uint8_t   FlagWrite;//写入FIFO的数据标志，可选ZeroCircle还有OneCircle
    uint8_t   FlagRead;//读出FIFO的数据标志，可选ZeroCircle还有OneCircle
    uint32_t  CanWriteNum;//还能被写入的数据长度
    uint32_t  CanReadNum;//能被读出的数据长度
    uint32_t  CurrentWriteNum;//当前写指针相对于首地址是第几个数据
    uint32_t  CurrentReadNum;//当前读指针相对于首地址是第几个数据
}FIFO;

/***************************************************************************************
函  数：void CreateFIFO(uint32 FIFOLength)
输入量：FIFOLength是要创建的FIFO的长度大小
返回值：无
备  注：该函数使用了动态内存分配，所以要减少使用量
***************************************************************************************/
void CreateFIFO(FIFO *DmaFIFO,uint32_t FIFOLength);

void InitFIFO(FIFO *DmaFIFO,uint8_t *pbuffer,uint32_t FIFOLength);
/***************************************************************************************
函  数：uint8 WriteFIFO(int8* pSource,uint32 WriteLength)
输入量：pSource是指向要数据源的一个指针
        WriteLength是要写入FIFO的数据长度
返回值：0--表示要写入的长度超过了FIFO可写入的长度，
        1--表示成功写入
备  注：该函数的作用是向FIFO里面写入指定长度的数据，如果数据超过可写长度将返回错误值
***************************************************************************************/
uint8_t WriteFIFO(FIFO *myFIFO,uint8_t* pSource,uint32_t WriteLength);

/***************************************************************************************
函  数：uint8 ReadFIFO(int8 *pAim,uint32 ReadLength)
输入量：pAim是指向要目标源的一个指针
        ReadLength是要写入FIFO的数据长度
返回值：0--表示要读取的长度超过了FIFO可读取的长度，
        1--表示成功读取
备  注：该函数的作用是将FIFO里面的数据读出到指定的一个地方
***************************************************************************************/
uint8_t ReadFIFO(FIFO *myFIFO,uint8_t *pAim,uint32_t ReadLength);

/***************************************************************************************
函  数：uint32 CheckFIFOLength(void)
输入量：
返回值：FIFO的总长度
备  注：
***************************************************************************************/
uint32_t CheckFIFOLength(FIFO *myFIFO);

/***************************************************************************************
函  数：int8* CheckCurrentWritePoint(void)
输入量：
返回值：当前写指针的具体位置
备  注：
***************************************************************************************/
uint8_t * CheckCurrentWritePoint(FIFO *myFIFO);

/***************************************************************************************
函  数：int8* CheckCurrentReadPoint(void)
输入量：
返回值：当前读指针的具体位置
备  注：
**************************************************************************************/
uint8_t * CheckCurrentReadPoint(FIFO *myFIFO);

/***************************************************************************************
函  数：void FreeFIFO(void)
输入量：
返回值：
备  注：释放FIFO占用的内存
***************************************************************************************/
void FreeFIFO(FIFO *myFIFO);

/***************************************************************************************
函  数：uint32 CheckCanWriteNum(void)
输入量：
返回值：返回还能写入FIFO的数据长度
备  注：
***************************************************************************************/
uint32_t CheckCanWriteNum(FIFO *myFIFO);

/***************************************************************************************
函  数：uint32 CheckCanReadNum(void)
输入量：
返回值：返回能被读出的FIFO数据长度
备  注：
***************************************************************************************/
uint32_t CheckCanReadNum(FIFO *myFIFO);

#endif