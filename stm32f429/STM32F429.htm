<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\STM32F429.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\STM32F429.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5.03 [Build 76]: Last Updated: Tue Oct 14 19:30:41 2014
<BR><P>
<H3>Maximum Stack Usage =       2020 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; RSTP &rArr; CREATE_RSTP_INSTANCE &rArr; STP_IN_stpm_set_cfg &rArr; _stp_in_stpm_enable &rArr; stp_in_stpm_create &rArr; STP_port_create &rArr; STP_state_mach_create &rArr; calloc &rArr; malloc
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1c]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC_IRQHandler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC_IRQHandler</a> from startup_stm32f429x.o(.text) referenced from startup_stm32f429x.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f429x.o(RESET)
 <LI><a href="#[1e]">CAN1_RX0_IRQHandler</a> from startup_stm32f429x.o(.text) referenced from startup_stm32f429x.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32f429x.o(.text) referenced from startup_stm32f429x.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f429x.o(.text) referenced from startup_stm32f429x.o(RESET)
 <LI><a href="#[1d]">CAN1_TX_IRQHandler</a> from startup_stm32f429x.o(.text) referenced from startup_stm32f429x.o(RESET)
 <LI><a href="#[4a]">CAN2_RX0_IRQHandler</a> from startup_stm32f429x.o(.text) referenced from startup_stm32f429x.o(RESET)
 <LI><a href="#[4b]">CAN2_RX1_IRQHandler</a> from startup_stm32f429x.o(.text) referenced from startup_stm32f429x.o(RESET)
 <LI><a href="#[4c]">CAN2_SCE_IRQHandler</a> from startup_stm32f429x.o(.text) referenced from startup_stm32f429x.o(RESET)
 <LI><a href="#[49]">CAN2_TX_IRQHandler</a> from startup_stm32f429x.o(.text) referenced from startup_stm32f429x.o(RESET)
 <LI><a href="#[59]">CRYP_IRQHandler</a> from startup_stm32f429x.o(.text) referenced from startup_stm32f429x.o(RESET)
 <LI><a href="#[58]">DCMI_IRQHandler</a> from startup_stm32f429x.o(.text) referenced from startup_stm32f429x.o(RESET)
 <LI><a href="#[15]">DMA1_Stream0_IRQHandler</a> from startup_stm32f429x.o(.text) referenced from startup_stm32f429x.o(RESET)
 <LI><a href="#[16]">DMA1_Stream1_IRQHandler</a> from startup_stm32f429x.o(.text) referenced from startup_stm32f429x.o(RESET)
 <LI><a href="#[17]">DMA1_Stream2_IRQHandler</a> from startup_stm32f429x.o(.text) referenced from startup_stm32f429x.o(RESET)
 <LI><a href="#[18]">DMA1_Stream3_IRQHandler</a> from startup_stm32f429x.o(.text) referenced from startup_stm32f429x.o(RESET)
 <LI><a href="#[19]">DMA1_Stream4_IRQHandler</a> from startup_stm32f429x.o(.text) referenced from startup_stm32f429x.o(RESET)
 <LI><a href="#[1a]">DMA1_Stream5_IRQHandler</a> from startup_stm32f429x.o(.text) referenced from startup_stm32f429x.o(RESET)
 <LI><a href="#[1b]">DMA1_Stream6_IRQHandler</a> from startup_stm32f429x.o(.text) referenced from startup_stm32f429x.o(RESET)
 <LI><a href="#[39]">DMA1_Stream7_IRQHandler</a> from startup_stm32f429x.o(.text) referenced from startup_stm32f429x.o(RESET)
 <LI><a href="#[64]">DMA2D_IRQHandler</a> from startup_stm32f429x.o(.text) referenced from startup_stm32f429x.o(RESET)
 <LI><a href="#[42]">DMA2_Stream0_IRQHandler</a> from startup_stm32f429x.o(.text) referenced from startup_stm32f429x.o(RESET)
 <LI><a href="#[43]">DMA2_Stream1_IRQHandler</a> from startup_stm32f429x.o(.text) referenced from startup_stm32f429x.o(RESET)
 <LI><a href="#[44]">DMA2_Stream2_IRQHandler</a> from startup_stm32f429x.o(.text) referenced from startup_stm32f429x.o(RESET)
 <LI><a href="#[45]">DMA2_Stream3_IRQHandler</a> from startup_stm32f429x.o(.text) referenced from startup_stm32f429x.o(RESET)
 <LI><a href="#[46]">DMA2_Stream4_IRQHandler</a> from startup_stm32f429x.o(.text) referenced from startup_stm32f429x.o(RESET)
 <LI><a href="#[4e]">DMA2_Stream5_IRQHandler</a> from startup_stm32f429x.o(.text) referenced from startup_stm32f429x.o(RESET)
 <LI><a href="#[4f]">DMA2_Stream6_IRQHandler</a> from startup_stm32f429x.o(.text) referenced from startup_stm32f429x.o(RESET)
 <LI><a href="#[50]">DMA2_Stream7_IRQHandler</a> from startup_stm32f429x.o(.text) referenced from startup_stm32f429x.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f429x.o(RESET)
 <LI><a href="#[47]">ETH_IRQHandler</a> from startup_stm32f429x.o(.text) referenced from startup_stm32f429x.o(RESET)
 <LI><a href="#[48]">ETH_WKUP_IRQHandler</a> from startup_stm32f429x.o(.text) referenced from startup_stm32f429x.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32f429x.o(.text) referenced from startup_stm32f429x.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32f429x.o(.text) referenced from startup_stm32f429x.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32f429x.o(.text) referenced from startup_stm32f429x.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f429x.o(.text) referenced from startup_stm32f429x.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f429x.o(.text) referenced from startup_stm32f429x.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32f429x.o(.text) referenced from startup_stm32f429x.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32f429x.o(.text) referenced from startup_stm32f429x.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f429x.o(.text) referenced from startup_stm32f429x.o(RESET)
 <LI><a href="#[3a]">FMC_IRQHandler</a> from startup_stm32f429x.o(.text) referenced from startup_stm32f429x.o(RESET)
 <LI><a href="#[5b]">FPU_IRQHandler</a> from startup_stm32f429x.o(.text) referenced from startup_stm32f429x.o(RESET)
 <LI><a href="#[9b]">HAL_SDRAM_DMA_XferCpltCallback</a> from stm32f4xx_hal_sdram.o(.text) referenced from stm32f4xx_hal_sdram.o(.text)
 <LI><a href="#[9c]">HAL_SDRAM_DMA_XferErrorCallback</a> from stm32f4xx_hal_sdram.o(.text) referenced from stm32f4xx_hal_sdram.o(.text)
 <LI><a href="#[98]">HAL_TIMEx_DMACommutationCplt</a> from stm32f4xx_hal_tim_ex.o(.text) referenced 2 times from stm32f4xx_hal_tim.o(.text)
 <LI><a href="#[9a]">HAL_TIM_DMACaptureCplt</a> from stm32f4xx_hal_tim.o(.text) referenced 4 times from stm32f4xx_hal_tim_ex.o(.text)
 <LI><a href="#[97]">HAL_TIM_DMADelayPulseCplt</a> from stm32f4xx_hal_tim.o(.text) referenced 5 times from stm32f4xx_hal_tim.o(.text)
 <LI><a href="#[96]">HAL_TIM_DMAError</a> from stm32f4xx_hal_tim.o(.text) referenced 8 times from stm32f4xx_hal_tim.o(.text)
 <LI><a href="#[5a]">HASH_RNG_IRQHandler</a> from startup_stm32f429x.o(.text) referenced from startup_stm32f429x.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f429x.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f429x.o(.text) referenced from startup_stm32f429x.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f429x.o(.text) referenced from startup_stm32f429x.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f429x.o(.text) referenced from startup_stm32f429x.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f429x.o(.text) referenced from startup_stm32f429x.o(RESET)
 <LI><a href="#[53]">I2C3_ER_IRQHandler</a> from startup_stm32f429x.o(.text) referenced from startup_stm32f429x.o(RESET)
 <LI><a href="#[52]">I2C3_EV_IRQHandler</a> from startup_stm32f429x.o(.text) referenced from startup_stm32f429x.o(RESET)
 <LI><a href="#[8a]">I2C_DMAError</a> from stm32f4xx_hal_i2c.o(.text) referenced 3 times from stm32f4xx_hal_i2c.o(.text)
 <LI><a href="#[8b]">I2C_DMAMasterReceiveCplt</a> from stm32f4xx_hal_i2c.o(.text) referenced from stm32f4xx_hal_i2c.o(.text)
 <LI><a href="#[89]">I2C_DMAMasterTransmitCplt</a> from stm32f4xx_hal_i2c.o(.text) referenced from stm32f4xx_hal_i2c.o(.text)
 <LI><a href="#[8f]">I2C_DMAMemReceiveCplt</a> from stm32f4xx_hal_i2c.o(.text) referenced from stm32f4xx_hal_i2c.o(.text)
 <LI><a href="#[8e]">I2C_DMAMemTransmitCplt</a> from stm32f4xx_hal_i2c.o(.text) referenced from stm32f4xx_hal_i2c.o(.text)
 <LI><a href="#[8d]">I2C_DMASlaveReceiveCplt</a> from stm32f4xx_hal_i2c.o(.text) referenced from stm32f4xx_hal_i2c.o(.text)
 <LI><a href="#[8c]">I2C_DMASlaveTransmitCplt</a> from stm32f4xx_hal_i2c.o(.text) referenced from stm32f4xx_hal_i2c.o(.text)
 <LI><a href="#[63]">LTDC_ER_IRQHandler</a> from startup_stm32f429x.o(.text) referenced from startup_stm32f429x.o(RESET)
 <LI><a href="#[62]">LTDC_IRQHandler</a> from startup_stm32f429x.o(.text) referenced from startup_stm32f429x.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f429x.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f429x.o(RESET)
 <LI><a href="#[4d]">OTG_FS_IRQHandler</a> from startup_stm32f429x.o(.text) referenced from startup_stm32f429x.o(RESET)
 <LI><a href="#[34]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f429x.o(.text) referenced from startup_stm32f429x.o(RESET)
 <LI><a href="#[55]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f429x.o(.text) referenced from startup_stm32f429x.o(RESET)
 <LI><a href="#[54]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f429x.o(.text) referenced from startup_stm32f429x.o(RESET)
 <LI><a href="#[57]">OTG_HS_IRQHandler</a> from startup_stm32f429x.o(.text) referenced from startup_stm32f429x.o(RESET)
 <LI><a href="#[56]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f429x.o(.text) referenced from startup_stm32f429x.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f429x.o(.text) referenced from startup_stm32f429x.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f429x.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f429x.o(.text) referenced from startup_stm32f429x.o(RESET)
 <LI><a href="#[33]">RTC_Alarm_IRQHandler</a> from startup_stm32f429x.o(.text) referenced from startup_stm32f429x.o(RESET)
 <LI><a href="#[d]">RTC_WKUP_IRQHandler</a> from startup_stm32f429x.o(.text) referenced from startup_stm32f429x.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f429x.o(.text) referenced from startup_stm32f429x.o(RESET)
 <LI><a href="#[61]">SAI1_IRQHandler</a> from startup_stm32f429x.o(.text) referenced from startup_stm32f429x.o(RESET)
 <LI><a href="#[3b]">SDIO_IRQHandler</a> from startup_stm32f429x.o(.text) referenced from startup_stm32f429x.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f429x.o(.text) referenced from startup_stm32f429x.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f429x.o(.text) referenced from startup_stm32f429x.o(RESET)
 <LI><a href="#[3d]">SPI3_IRQHandler</a> from startup_stm32f429x.o(.text) referenced from startup_stm32f429x.o(RESET)
 <LI><a href="#[5e]">SPI4_IRQHandler</a> from startup_stm32f429x.o(.text) referenced from startup_stm32f429x.o(RESET)
 <LI><a href="#[5f]">SPI5_IRQHandler</a> from startup_stm32f429x.o(.text) referenced from startup_stm32f429x.o(RESET)
 <LI><a href="#[60]">SPI6_IRQHandler</a> from startup_stm32f429x.o(.text) referenced from startup_stm32f429x.o(RESET)
 <LI><a href="#[84]">STP_change_state</a> from statmch.o(.text) referenced from stpm.o(.text)
 <LI><a href="#[83]">STP_check_condition</a> from statmch.o(.text) referenced from stpm.o(.text)
 <LI><a href="#[72]">STP_edge_check_conditions</a> from edge.o(.text) referenced from port.o(.text)
 <LI><a href="#[73]">STP_edge_enter_state</a> from edge.o(.text) referenced from port.o(.text)
 <LI><a href="#[71]">STP_edge_get_state_name</a> from edge.o(.text) referenced from port.o(.text)
 <LI><a href="#[78]">STP_info_check_conditions</a> from portinfo.o(.text) referenced from port.o(.text)
 <LI><a href="#[79]">STP_info_enter_state</a> from portinfo.o(.text) referenced from port.o(.text)
 <LI><a href="#[77]">STP_info_get_state_name</a> from portinfo.o(.text) referenced from port.o(.text)
 <LI><a href="#[6c]">STP_migrate_check_conditions</a> from migrate.o(.text) referenced from port.o(.text)
 <LI><a href="#[6d]">STP_migrate_enter_state</a> from migrate.o(.text) referenced from port.o(.text)
 <LI><a href="#[6b]">STP_migrate_get_state_name</a> from migrate.o(.text) referenced from port.o(.text)
 <LI><a href="#[6f]">STP_p2p_check_conditions</a> from p2p.o(.text) referenced from port.o(.text)
 <LI><a href="#[70]">STP_p2p_enter_state</a> from p2p.o(.text) referenced from port.o(.text)
 <LI><a href="#[6e]">STP_p2p_get_state_name</a> from p2p.o(.text) referenced from port.o(.text)
 <LI><a href="#[75]">STP_pcost_check_conditions</a> from pcost.o(.text) referenced from port.o(.text)
 <LI><a href="#[76]">STP_pcost_enter_state</a> from pcost.o(.text) referenced from port.o(.text)
 <LI><a href="#[74]">STP_pcost_get_state_name</a> from pcost.o(.text) referenced from port.o(.text)
 <LI><a href="#[86]">STP_rolesel_check_conditions</a> from rolesel.o(.text) referenced from stpm.o(.text)
 <LI><a href="#[87]">STP_rolesel_enter_state</a> from rolesel.o(.text) referenced from stpm.o(.text)
 <LI><a href="#[85]">STP_rolesel_get_state_name</a> from rolesel.o(.text) referenced from stpm.o(.text)
 <LI><a href="#[7b]">STP_roletrns_check_conditions</a> from roletrns.o(.text) referenced from port.o(.text)
 <LI><a href="#[7c]">STP_roletrns_enter_state</a> from roletrns.o(.text) referenced from port.o(.text)
 <LI><a href="#[7a]">STP_roletrns_get_state_name</a> from roletrns.o(.text) referenced from port.o(.text)
 <LI><a href="#[7e]">STP_sttrans_check_conditions</a> from sttrans.o(.text) referenced from port.o(.text)
 <LI><a href="#[7f]">STP_sttrans_enter_state</a> from sttrans.o(.text) referenced from port.o(.text)
 <LI><a href="#[7d]">STP_sttrans_get_state_name</a> from sttrans.o(.text) referenced from port.o(.text)
 <LI><a href="#[69]">STP_topoch_check_conditions</a> from topoch.o(.text) referenced from port.o(.text)
 <LI><a href="#[6a]">STP_topoch_enter_state</a> from topoch.o(.text) referenced from port.o(.text)
 <LI><a href="#[68]">STP_topoch_get_state_name</a> from topoch.o(.text) referenced from port.o(.text)
 <LI><a href="#[81]">STP_transmit_check_conditions</a> from transmit.o(.text) referenced from port.o(.text)
 <LI><a href="#[82]">STP_transmit_enter_state</a> from transmit.o(.text) referenced from port.o(.text)
 <LI><a href="#[80]">STP_transmit_get_state_name</a> from transmit.o(.text) referenced from port.o(.text)
 <LI><a href="#[6]">SVC_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f429x.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f429x.o(RESET)
 <LI><a href="#[66]">SystemInit</a> from system_stm32f4xx.o(.text) referenced from startup_stm32f429x.o(.text)
 <LI><a href="#[c]">TAMP_STAMP_IRQHandler</a> from startup_stm32f429x.o(.text) referenced from startup_stm32f429x.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f429x.o(.text) referenced from startup_stm32f429x.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f429x.o(.text) referenced from startup_stm32f429x.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f429x.o(.text) referenced from startup_stm32f429x.o(RESET)
 <LI><a href="#[23]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f429x.o(.text) referenced from startup_stm32f429x.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f429x.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f429x.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32f429x.o(.text) referenced from startup_stm32f429x.o(RESET)
 <LI><a href="#[3c]">TIM5_IRQHandler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f429x.o(RESET)
 <LI><a href="#[40]">TIM6_DAC_IRQHandler</a> from startup_stm32f429x.o(.text) referenced from startup_stm32f429x.o(RESET)
 <LI><a href="#[41]">TIM7_IRQHandler</a> from startup_stm32f429x.o(.text) referenced from startup_stm32f429x.o(RESET)
 <LI><a href="#[35]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f429x.o(.text) referenced from startup_stm32f429x.o(RESET)
 <LI><a href="#[38]">TIM8_CC_IRQHandler</a> from startup_stm32f429x.o(.text) referenced from startup_stm32f429x.o(RESET)
 <LI><a href="#[37]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f429x.o(.text) referenced from startup_stm32f429x.o(RESET)
 <LI><a href="#[36]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f429x.o(.text) referenced from startup_stm32f429x.o(RESET)
 <LI><a href="#[95]">TIM_DMAPeriodElapsedCplt</a> from stm32f4xx_hal_tim.o(.text) referenced 2 times from stm32f4xx_hal_tim.o(.text)
 <LI><a href="#[99]">TIM_DMATriggerCplt</a> from stm32f4xx_hal_tim.o(.text) referenced from stm32f4xx_hal_tim.o(.text)
 <LI><a href="#[3e]">UART4_IRQHandler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f429x.o(RESET)
 <LI><a href="#[3f]">UART5_IRQHandler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f429x.o(RESET)
 <LI><a href="#[5c]">UART7_IRQHandler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f429x.o(RESET)
 <LI><a href="#[5d]">UART8_IRQHandler</a> from startup_stm32f429x.o(.text) referenced from startup_stm32f429x.o(RESET)
 <LI><a href="#[92]">UART_DMAError</a> from stm32f4xx_hal_uart.o(.text) referenced from stm32f4xx_hal_uart.o(.text)
 <LI><a href="#[93]">UART_DMAReceiveCplt</a> from stm32f4xx_hal_uart.o(.text) referenced from stm32f4xx_hal_uart.o(.text)
 <LI><a href="#[94]">UART_DMARxHalfCplt</a> from stm32f4xx_hal_uart.o(.text) referenced from stm32f4xx_hal_uart.o(.text)
 <LI><a href="#[90]">UART_DMATransmitCplt</a> from stm32f4xx_hal_uart.o(.text) referenced from stm32f4xx_hal_uart.o(.text)
 <LI><a href="#[91]">UART_DMATxHalfCplt</a> from stm32f4xx_hal_uart.o(.text) referenced from stm32f4xx_hal_uart.o(.text)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f429x.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from startup_stm32f429x.o(.text) referenced from startup_stm32f429x.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from startup_stm32f429x.o(.text) referenced from startup_stm32f429x.o(RESET)
 <LI><a href="#[51]">USART6_IRQHandler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f429x.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f429x.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f429x.o(.text) referenced from startup_stm32f429x.o(RESET)
 <LI><a href="#[67]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f429x.o(.text)
 <LI><a href="#[9e]">_sputc</a> from printf8.o(i._sputc) referenced from printf8.o(i.__0sprintf$8)
 <LI><a href="#[88]">_stp_stpm_init_machine</a> from stpm.o(.text) referenced from stpm.o(.text)
 <LI><a href="#[9d]">fputc</a> from main.o(.text) referenced from printf8.o(i.__0printf$8)
 <LI><a href="#[65]">main</a> from main.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[67]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429x.o(.text)
</UL>
<P><STRONG><a name="[27f]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[9f]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[279]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[280]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[281]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[282]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[283]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[284]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[66]"></a>SystemInit</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, system_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429x.o(.text)
</UL>
<P><STRONG><a name="[285]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, system_stm32f4xx.o(.text), UNUSED)

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f429x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429x.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429x.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429x.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429x.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429x.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429x.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429x.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429x.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429x.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429x.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>CRYP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429x.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429x.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429x.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429x.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429x.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429x.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429x.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429x.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429x.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429x.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>DMA2D_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429x.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429x.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429x.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429x.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429x.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429x.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429x.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429x.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429x.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429x.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429x.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429x.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429x.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429x.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429x.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429x.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429x.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429x.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429x.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429x.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429x.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429x.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429x.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429x.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429x.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429x.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429x.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429x.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>LTDC_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429x.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>LTDC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429x.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429x.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429x.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429x.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429x.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429x.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429x.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429x.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429x.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429x.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429x.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429x.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429x.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429x.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429x.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429x.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429x.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>SPI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429x.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>SPI6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429x.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429x.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429x.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429x.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429x.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429x.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429x.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429x.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429x.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429x.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429x.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429x.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429x.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>UART8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429x.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429x.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429x.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429x.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429x.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429x.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429x.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429x.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429x.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429x.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429x.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429x.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429x.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM2_IRQHandler &rArr; HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429x.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM5_IRQHandler &rArr; HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429x.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM3_IRQHandler &rArr; HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429x.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>USART6_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USART6_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429x.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USART1_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429x.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART5_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART5_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429x.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>UART7_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART7_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429x.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>UART4_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART4_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429x.o(RESET)
</UL>
<P><STRONG><a name="[a4]"></a>I2C1_EV_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_EV_IRQHandler
</UL>

<P><STRONG><a name="[a6]"></a>I2C1_ER_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ER_IRQHandler
</UL>

<P><STRONG><a name="[9d]"></a>fputc</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0printf$8)
</UL>
<P><STRONG><a name="[f6]"></a>Delay</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Marvell_MAC_upt
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NOR_Read_ID
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NOR_Program
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NOR_Read
</UL>

<P><STRONG><a name="[a9]"></a>Get_DIAL_Mode</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Get_DIAL_Mode
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ab]"></a>Blink_LED_RUN</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Blink_LED_RUN
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_CLI
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAC_CLI
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSTP
</UL>

<P><STRONG><a name="[ad]"></a>A_Test_for_heap</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[af]"></a>func</STRONG> (Thumb, 46 bytes, Stack size 1028 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func
</UL>

<P><STRONG><a name="[65]"></a>main</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2020<LI>Call Chain = main &rArr; RSTP &rArr; CREATE_RSTP_INSTANCE &rArr; STP_IN_stpm_set_cfg &rArr; _stp_in_stpm_enable &rArr; stp_in_stpm_create &rArr; STP_port_create &rArr; STP_state_mach_create &rArr; calloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMx_Configuration
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSTP
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MII_Init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InVariate_Init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Configuration
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Configuration
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLI
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_DIAL_Mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[bd]"></a>UART_Fillin_TX</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, veth_com_usart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit
</UL>

<P><STRONG><a name="[bc]"></a>UART_Transmit</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, veth_com_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_IT
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_GetState
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Fillin_TX
</UL>

<P><STRONG><a name="[286]"></a>UART_GETdata_RX</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, veth_com_usart.o(.text), UNUSED)

<P><STRONG><a name="[c0]"></a>UART_Recieve</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, veth_com_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_Recieve
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_comd
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_CLI
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAC_CLI
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLI
</UL>

<P><STRONG><a name="[287]"></a>Read_from_buffer</STRONG> (Thumb, 118 bytes, Stack size 20 bytes, veth_com_usart.o(.text), UNUSED)

<P><STRONG><a name="[c3]"></a>MAC_CLI</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, veth_com_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = MAC_CLI &rArr; Modify_the_MAC &rArr; Update_InVariate &rArr; HAL_FLASHEx_Erase &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modify_the_MAC
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_command_gen
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_the_MAC
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Recieve
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blink_LED_RUN
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_CLI
</UL>

<P><STRONG><a name="[c9]"></a>IP_CLI</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, veth_com_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IP_CLI &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_CLI
</UL>

<P><STRONG><a name="[ca]"></a>New_CLI</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, veth_com_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = New_CLI &rArr; MAC_CLI &rArr; Modify_the_MAC &rArr; Update_InVariate &rArr; HAL_FLASHEx_Erase &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_command_gen
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_CLI
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAC_CLI
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Recieve
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blink_LED_RUN
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLI
</UL>

<P><STRONG><a name="[ba]"></a>CLI</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, veth_com_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = CLI &rArr; New_CLI &rArr; MAC_CLI &rArr; Modify_the_MAC &rArr; Update_InVariate &rArr; HAL_FLASHEx_Erase &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_command_gen
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_CLI
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Recieve
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cc]"></a>Add_From_CPU_tag</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, veth_eth_ap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Add_From_CPU_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_TX_PACKET
</UL>

<P><STRONG><a name="[cd]"></a>ETH_Fillin_TXBUF</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, veth_eth_ap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ETH_Fillin_TXBUF
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_EXCS
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_TX_PACKET
</UL>

<P><STRONG><a name="[288]"></a>ETH_Set_Recieve_ALLOWN</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, veth_eth_ap.o(.text), UNUSED)

<P><STRONG><a name="[cb]"></a>ETH_TX_PACKET</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, veth_eth_ap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ETH_TX_PACKET &rArr; HAL_ETH_TransmitFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_TransmitFrame
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Fillin_TXBUF
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_From_CPU_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_OUT_tx_bpdu
</UL>

<P><STRONG><a name="[d6]"></a>ETH_Convert_DASA</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, veth_eth_ap.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_EXCS
</UL>

<P><STRONG><a name="[cf]"></a>ETH_RX_PACKET</STRONG> (Thumb, 226 bytes, Stack size 56 bytes, veth_eth_ap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = ETH_RX_PACKET &rArr; STP_IN_check_bpdu_header &rArr; ntohs
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_IN_check_bpdu_header
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_GetReceivedFrame
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rx_packet
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSTP
</UL>

<P><STRONG><a name="[d4]"></a>ETH_EXCS</STRONG> (Thumb, 142 bytes, Stack size 1624 bytes, veth_eth_ap.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_TransmitFrame
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Start
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_GetReceivedFrame
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Convert_DASA
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Fillin_TXBUF
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[289]"></a>Tx_packet</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, veth_eth_ap.o(.text), UNUSED)

<P><STRONG><a name="[d7]"></a>Rx_packet</STRONG> (Thumb, 30 bytes, Stack size 1656 bytes, veth_eth_ap.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_RX_PACKET
</UL>

<P><STRONG><a name="[b1]"></a>RCC_Configuration</STRONG> (Thumb, 190 bytes, Stack size 0 bytes, veth_hal_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b2]"></a>NVIC_Configuration</STRONG> (Thumb, 188 bytes, Stack size 8 bytes, veth_hal_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = NVIC_Configuration &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b3]"></a>GPIO_Configuration</STRONG> (Thumb, 450 bytes, Stack size 56 bytes, veth_hal_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = GPIO_Configuration &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b4]"></a>USART_Configuration</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, veth_hal_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = USART_Configuration &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; HAL_RCC_GetPCLK1Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b8]"></a>TIMx_Configuration</STRONG> (Thumb, 260 bytes, Stack size 32 bytes, veth_hal_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = TIMx_Configuration &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b6]"></a>ETH_Configuration</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, veth_hal_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ETH_Configuration &rArr; HAL_ETH_Init &rArr; ETH_MACDMAConfig &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_Purge_ATUentry
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_DMATxDescListInit
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_DMARxDescListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[28a]"></a>Variate_init</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, veth_hal_init.o(.text), UNUSED)

<P><STRONG><a name="[b9]"></a>MII_Init</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, veth_hal_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = MII_Init &rArr; HAL_ETH_WritePHYRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_WritePHYRegister
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_ReadPHYRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e5]"></a>RSTP_Init</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, veth_hal_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = RSTP_Init &rArr; Load_Purge_ATUentry &rArr; HAL_ETH_WritePHYRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_Purge_ATUentry
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_WritePHYRegister
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_ReadPHYRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSTP
</UL>

<P><STRONG><a name="[b7]"></a>I2C_Configuration</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, veth_hal_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = I2C_Configuration &rArr; HAL_I2C_Init &rArr; HAL_RCC_GetPCLK1Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e7]"></a>SDRAM_Configuration</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, veth_hal_init.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_Init
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SDRAM_Initialization_Sequence
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[ea]"></a>FLASH_Configuration</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, veth_hal_init.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NOR_Init
</UL>

<P><STRONG><a name="[c8]"></a>Modify_the_MAC</STRONG> (Thumb, 156 bytes, Stack size 48 bytes, veth_hal_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Modify_the_MAC &rArr; Update_InVariate &rArr; HAL_FLASHEx_Erase &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_InVariate
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAC_CLI
</UL>

<P><STRONG><a name="[c7]"></a>Display_the_MAC</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, veth_hal_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Display_the_MAC &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAC_CLI
</UL>

<P><STRONG><a name="[ef]"></a>printf_trunk_vector</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, veth_marvell_6097f.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[f0]"></a>printf_mask_table</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, veth_marvell_6097f.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[f1]"></a>printf_PORT_CONTROL1</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, veth_marvell_6097f.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_ReadPHYRegister
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[f2]"></a>READ_PHYREGISTER</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, veth_marvell_6097f.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_WritePHYRegister
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_ReadPHYRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_PORT_STATS
</UL>

<P><STRONG><a name="[f3]"></a>WRITE_PHYREGISTER</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, veth_marvell_6097f.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_WritePHYRegister
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_ReadPHYRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_PORT_STATS
</UL>

<P><STRONG><a name="[f4]"></a>Set_aging_time</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, veth_marvell_6097f.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_WritePHYRegister
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_ReadPHYRegister
</UL>

<P><STRONG><a name="[f5]"></a>Marvell_MAC_upt</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, veth_marvell_6097f.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_WritePHYRegister
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_ReadPHYRegister
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[f7]"></a>Flush_Move_ATUentry</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, veth_marvell_6097f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Flush_Move_ATUentry &rArr; HAL_ETH_WritePHYRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_WritePHYRegister
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_ReadPHYRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Marvell_ATU_operate
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSTP
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_OUT_flush_lt
</UL>

<P><STRONG><a name="[e2]"></a>Load_Purge_ATUentry</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, veth_marvell_6097f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Load_Purge_ATUentry &rArr; HAL_ETH_WritePHYRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_WritePHYRegister
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_ReadPHYRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Marvell_ATU_operate
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSTP_Init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Configuration
</UL>

<P><STRONG><a name="[f8]"></a>Read_ATU_entry</STRONG> (Thumb, 394 bytes, Stack size 16 bytes, veth_marvell_6097f.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_WritePHYRegister
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_ReadPHYRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Marvell_ATU_operate
</UL>

<P><STRONG><a name="[f9]"></a>Marvell_ATU_operate</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, veth_marvell_6097f.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ATU_entry
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flush_Move_ATUentry
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_Purge_ATUentry
</UL>

<P><STRONG><a name="[fa]"></a>Set_Manual_learning_mode</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, veth_marvell_6097f.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_ReadPHYRegister
</UL>

<P><STRONG><a name="[fb]"></a>Read_VTU_entry</STRONG> (Thumb, 234 bytes, Stack size 24 bytes, veth_marvell_6097f.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_WritePHYRegister
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_ReadPHYRegister
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[fc]"></a>LOAD_PURGE_VTU</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, veth_marvell_6097f.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_WritePHYRegister
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_ReadPHYRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Creat_Delet_VLAN
</UL>

<P><STRONG><a name="[fd]"></a>Flush_VTU_entry</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, veth_marvell_6097f.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_WritePHYRegister
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_ReadPHYRegister
</UL>

<P><STRONG><a name="[fe]"></a>Creat_Delet_VLAN</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, veth_marvell_6097f.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOAD_PURGE_VTU
</UL>

<P><STRONG><a name="[ff]"></a>Set_PORT_VLAN_VECTOR</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, veth_marvell_6097f.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_WritePHYRegister
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_ReadPHYRegister
</UL>

<P><STRONG><a name="[100]"></a>Clear_ALL_COUNTER</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, veth_marvell_6097f.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_WritePHYRegister
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_ReadPHYRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_COUNTER_mode
</UL>

<P><STRONG><a name="[101]"></a>Read_A_CAPTURED_COUNTER</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, veth_marvell_6097f.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_WritePHYRegister
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_ReadPHYRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_PORT_COUNTERs
</UL>

<P><STRONG><a name="[102]"></a>Read_PORT_COUNTERs</STRONG> (Thumb, 530 bytes, Stack size 32 bytes, veth_marvell_6097f.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_A_CAPTURED_COUNTER
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_WritePHYRegister
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_ReadPHYRegister
</UL>

<P><STRONG><a name="[103]"></a>Change_COUNTER_mode</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, veth_marvell_6097f.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_ALL_COUNTER
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_WritePHYRegister
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_ReadPHYRegister
</UL>

<P><STRONG><a name="[104]"></a>Set_Trunk_port</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, veth_marvell_6097f.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_WritePHYRegister
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_ReadPHYRegister
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[105]"></a>Set_TRUNK_TABLE</STRONG> (Thumb, 312 bytes, Stack size 64 bytes, veth_marvell_6097f.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_WritePHYRegister
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_ReadPHYRegister
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[106]"></a>Clear_A_trunk</STRONG> (Thumb, 318 bytes, Stack size 40 bytes, veth_marvell_6097f.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_WritePHYRegister
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_ReadPHYRegister
</UL>

<P><STRONG><a name="[107]"></a>Clear_ALL_trunks</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, veth_marvell_6097f.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_WritePHYRegister
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_ReadPHYRegister
</UL>

<P><STRONG><a name="[108]"></a>Set_Switch_Port_state</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, veth_marvell_6097f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Set_Switch_Port_state &rArr; HAL_ETH_WritePHYRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_WritePHYRegister
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_ReadPHYRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_OUT_set_port_state
</UL>

<P><STRONG><a name="[109]"></a>Get_Port_status</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, veth_marvell_6097f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Get_Port_status &rArr; HAL_ETH_ReadPHYRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_ReadPHYRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_OUT_get_port_link_status
</UL>

<P><STRONG><a name="[10a]"></a>Get_Oper_speed</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, veth_marvell_6097f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Get_Oper_speed &rArr; HAL_ETH_ReadPHYRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_ReadPHYRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_OUT_get_port_oper_speed
</UL>

<P><STRONG><a name="[10b]"></a>Get_Port_duplex</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, veth_marvell_6097f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Get_Port_duplex &rArr; HAL_ETH_ReadPHYRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_ReadPHYRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_OUT_get_duplex
</UL>

<P><STRONG><a name="[164]"></a>Get_Port_cost</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, veth_marvell_6097f.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_OUT_get_deafult_port_path_cost
</UL>

<P><STRONG><a name="[10c]"></a>Set_PORT_STATS</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, veth_marvell_6097f.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WRITE_PHYREGISTER
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;READ_PHYREGISTER
</UL>

<P><STRONG><a name="[10d]"></a>Set_FLOW_CONTROL</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, veth_marvell_6097f.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_WritePHYRegister
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_ReadPHYRegister
</UL>

<P><STRONG><a name="[b0]"></a>SystemClock_Config</STRONG> (Thumb, 114 bytes, Stack size 80 bytes, veth_system_clock.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_CLKSourceConfig
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[28b]"></a>htonl</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, veth_ntoh.o(.text), UNUSED)

<P><STRONG><a name="[16b]"></a>htons</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, veth_ntoh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = htons
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stp_vect_set_short
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_bpdu_header
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_set_times
</UL>

<P><STRONG><a name="[175]"></a>ntohl</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, veth_ntoh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ntohl
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_VECT_set_vector
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_VECT_get_vector
</UL>

<P><STRONG><a name="[152]"></a>ntohs</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, veth_ntoh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ntohs
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_IN_check_bpdu_header
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stp_vect_get_short
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_get_times
</UL>

<P><STRONG><a name="[113]"></a>CREATE_RSTP_INSTANCE</STRONG> (Thumb, 100 bytes, Stack size 72 bytes, veth_rstp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = CREATE_RSTP_INSTANCE &rArr; STP_IN_stpm_set_cfg &rArr; _stp_in_stpm_enable &rArr; stp_in_stpm_create &rArr; STP_port_create &rArr; STP_state_mach_create &rArr; calloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_OUT_get_port_link_status
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_IN_stpm_set_cfg
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_IN_init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSTP
</UL>

<P><STRONG><a name="[bb]"></a>RSTP</STRONG> (Thumb, 194 bytes, Stack size 1656 bytes, veth_rstp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2004<LI>Call Chain = RSTP &rArr; CREATE_RSTP_INSTANCE &rArr; STP_IN_stpm_set_cfg &rArr; _stp_in_stpm_enable &rArr; stp_in_stpm_create &rArr; STP_port_create &rArr; STP_state_mach_create &rArr; calloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flush_Move_ATUentry
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSTP_Init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Start
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_RX_PACKET
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blink_LED_RUN
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_OUT_get_port_link_status
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_IN_rx_bpdu
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_IN_one_second
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_IN_enable_port
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CREATE_RSTP_INSTANCE
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ec]"></a>Update_InVariate</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, veth_invariate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Update_InVariate &rArr; HAL_FLASHEx_Erase &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modify_the_MAC
</UL>

<P><STRONG><a name="[11e]"></a>Get_InVariate</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, veth_invariate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Get_InVariate
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InVariate_Init
</UL>

<P><STRONG><a name="[b5]"></a>InVariate_Init</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, veth_invariate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = InVariate_Init &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_InVariate
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[71]"></a>STP_edge_get_state_name</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, edge.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> port.o(.text)
</UL>
<P><STRONG><a name="[73]"></a>STP_edge_enter_state</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, edge.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> port.o(.text)
</UL>
<P><STRONG><a name="[72]"></a>STP_edge_check_conditions</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, edge.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_hop_2_state
</UL>
<BR>[Address Reference Count : 1]<UL><LI> port.o(.text)
</UL>
<P><STRONG><a name="[6b]"></a>STP_migrate_get_state_name</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, migrate.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> port.o(.text)
</UL>
<P><STRONG><a name="[6d]"></a>STP_migrate_enter_state</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, migrate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = STP_migrate_enter_state
</UL>
<BR>[Address Reference Count : 1]<UL><LI> port.o(.text)
</UL>
<P><STRONG><a name="[6c]"></a>STP_migrate_check_conditions</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, migrate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = STP_migrate_check_conditions
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_hop_2_state
</UL>
<BR>[Address Reference Count : 1]<UL><LI> port.o(.text)
</UL>
<P><STRONG><a name="[6e]"></a>STP_p2p_get_state_name</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, p2p.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> port.o(.text)
</UL>
<P><STRONG><a name="[70]"></a>STP_p2p_enter_state</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, p2p.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = STP_p2p_enter_state &rArr; STP_OUT_get_duplex &rArr; Get_Port_duplex &rArr; HAL_ETH_ReadPHYRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_OUT_get_duplex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> port.o(.text)
</UL>
<P><STRONG><a name="[6f]"></a>STP_p2p_check_conditions</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, p2p.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_hop_2_state
</UL>
<BR>[Address Reference Count : 1]<UL><LI> port.o(.text)
</UL>
<P><STRONG><a name="[74]"></a>STP_pcost_get_state_name</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, pcost.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> port.o(.text)
</UL>
<P><STRONG><a name="[76]"></a>STP_pcost_enter_state</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, pcost.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = STP_pcost_enter_state &rArr; STP_OUT_get_port_oper_speed &rArr; Get_Oper_speed &rArr; HAL_ETH_ReadPHYRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_OUT_get_port_oper_speed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> port.o(.text)
</UL>
<P><STRONG><a name="[75]"></a>STP_pcost_check_conditions</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, pcost.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_hop_2_state
</UL>
<BR>[Address Reference Count : 1]<UL><LI> port.o(.text)
</UL>
<P><STRONG><a name="[122]"></a>STP_port_create</STRONG> (Thumb, 402 bytes, Stack size 64 bytes, port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = STP_port_create &rArr; STP_state_mach_create &rArr; calloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_state_mach_create
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_OUT_get_port_name
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_OUT_get_init_port_cfg
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stp_in_stpm_create
</UL>

<P><STRONG><a name="[128]"></a>STP_port_init</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = STP_port_init &rArr; STP_OUT_get_port_oper_speed &rArr; Get_Oper_speed &rArr; HAL_ETH_ReadPHYRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_copy_times
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_VECT_create
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_OUT_get_port_oper_speed
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_OUT_get_port_link_status
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_stpm_start
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_stp_in_enable_port_on_stpm
</UL>

<P><STRONG><a name="[12b]"></a>STP_port_delete</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = STP_port_delete &rArr; STP_state_mach_delete &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_state_mach_delete
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_stpm_delete
</UL>

<P><STRONG><a name="[12e]"></a>STP_port_rx_bpdu</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = STP_port_rx_bpdu &rArr; STP_info_rx_bpdu &rArr; STP_VECT_get_vector &rArr; stp_vect_get_bridge_id &rArr; stp_vect_get_short &rArr; ntohs
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_info_rx_bpdu
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_IN_rx_bpdu
</UL>

<P><STRONG><a name="[77]"></a>STP_info_get_state_name</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, portinfo.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> port.o(.text)
</UL>
<P><STRONG><a name="[12f]"></a>STP_info_rx_bpdu</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, portinfo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = STP_info_rx_bpdu &rArr; STP_VECT_get_vector &rArr; stp_vect_get_bridge_id &rArr; stp_vect_get_short &rArr; ntohs
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_get_times
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_VECT_get_vector
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_port_rx_bpdu
</UL>

<P><STRONG><a name="[79]"></a>STP_info_enter_state</STRONG> (Thumb, 384 bytes, Stack size 24 bytes, portinfo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = STP_info_enter_state &rArr; rcvBpdu &rArr; STP_VECT_compare_vector &rArr; STP_VECT_compare_bridge_id &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_VECT_copy
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recordProposed
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcvBpdu
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updtRcvdInfoWhile
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_copy_times
</UL>
<BR>[Address Reference Count : 1]<UL><LI> port.o(.text)
</UL>
<P><STRONG><a name="[78]"></a>STP_info_check_conditions</STRONG> (Thumb, 196 bytes, Stack size 8 bytes, portinfo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = STP_info_check_conditions
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_hop_2_state
</UL>
<BR>[Address Reference Count : 1]<UL><LI> port.o(.text)
</UL>
<P><STRONG><a name="[85]"></a>STP_rolesel_get_state_name</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rolesel.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stpm.o(.text)
</UL>
<P><STRONG><a name="[87]"></a>STP_rolesel_enter_state</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, rolesel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = STP_rolesel_enter_state &rArr; updtRolesBridge &rArr; updtRootPrio &rArr; STP_VECT_compare_vector &rArr; STP_VECT_compare_bridge_id &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updtRolesBridge
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stpm.o(.text)
</UL>
<P><STRONG><a name="[86]"></a>STP_rolesel_check_conditions</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, rolesel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = STP_rolesel_check_conditions
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_hop_2_state
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stpm.o(.text)
</UL>
<P><STRONG><a name="[13c]"></a>STP_rolesel_update_stpm</STRONG> (Thumb, 136 bytes, Stack size 64 bytes, rolesel.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_VECT_copy
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_VECT_compare_vector
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_VECT_create
</UL>

<P><STRONG><a name="[7a]"></a>STP_roletrns_get_state_name</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, roletrns.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> port.o(.text)
</UL>
<P><STRONG><a name="[7c]"></a>STP_roletrns_enter_state</STRONG> (Thumb, 296 bytes, Stack size 12 bytes, roletrns.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = STP_roletrns_enter_state
</UL>
<BR>[Address Reference Count : 1]<UL><LI> port.o(.text)
</UL>
<P><STRONG><a name="[7b]"></a>STP_roletrns_check_conditions</STRONG> (Thumb, 654 bytes, Stack size 24 bytes, roletrns.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = STP_roletrns_check_conditions
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_hop_2_state
</UL>
<BR>[Address Reference Count : 1]<UL><LI> port.o(.text)
</UL>
<P><STRONG><a name="[127]"></a>STP_state_mach_create</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, statmch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = STP_state_mach_create &rArr; calloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_stpm_create
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_port_create
</UL>

<P><STRONG><a name="[12d]"></a>STP_state_mach_delete</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, statmch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = STP_state_mach_delete &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_stpm_delete
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_port_delete
</UL>

<P><STRONG><a name="[83]"></a>STP_check_condition</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, statmch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = STP_check_condition
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_change_state
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stpm.o(.text)
</UL>
<P><STRONG><a name="[84]"></a>STP_change_state</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, statmch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = STP_change_state &rArr; STP_check_condition
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_check_condition
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stpm.o(.text)
</UL>
<P><STRONG><a name="[11f]"></a>STP_hop_2_state</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, statmch.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_rolesel_check_conditions
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_transmit_check_conditions
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_topoch_check_conditions
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_sttrans_check_conditions
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_roletrns_check_conditions
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_info_check_conditions
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_pcost_check_conditions
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_p2p_check_conditions
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_migrate_check_conditions
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_edge_check_conditions
</UL>

<P><STRONG><a name="[13d]"></a>stpapi_stpm_find</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stp_in.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = stpapi_stpm_find
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_stpm_get_the_list
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_IN_get_is_stpm_enabled
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_IN_stpm_delete
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_IN_set_port_cfg
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_IN_stpm_get_state
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_IN_port_get_state
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_IN_port_get_cfg
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_IN_stpm_get_cfg
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_stp_in_stpm_enable
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stp_in_stpm_create
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_IN_stpm_set_cfg
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_IN_rx_bpdu
</UL>

<P><STRONG><a name="[13f]"></a>stp_in_stpm_create</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, stp_in.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = stp_in_stpm_create &rArr; STP_port_create &rArr; STP_state_mach_create &rArr; calloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_stpm_delete
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_stpm_create
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stpapi_stpm_find
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_port_create
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_STPM_IN_create
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_stp_in_stpm_enable
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_IN_stpm_set_cfg
</UL>

<P><STRONG><a name="[142]"></a>_stp_in_stpm_enable</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, stp_in.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = _stp_in_stpm_enable &rArr; stp_in_stpm_create &rArr; STP_port_create &rArr; STP_state_mach_create &rArr; calloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_stpm_get_the_list
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_stpm_enable
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_stpm_delete
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_OUT_set_hardware_mode
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stp_in_stpm_create
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stpapi_stpm_find
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_IN_stpm_set_cfg
</UL>

<P><STRONG><a name="[114]"></a>STP_IN_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stp_in.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CREATE_RSTP_INSTANCE
</UL>

<P><STRONG><a name="[147]"></a>STP_IN_stpm_get_cfg</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, stp_in.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = STP_IN_stpm_get_cfg &rArr; stpapi_stpm_find
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stpapi_stpm_find
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_IN_stpm_set_cfg
</UL>

<P><STRONG><a name="[148]"></a>STP_IN_port_get_cfg</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, stp_in.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stpapi_stpm_find
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_stpapi_port_find
</UL>

<P><STRONG><a name="[149]"></a>STP_IN_port_get_state</STRONG> (Thumb, 346 bytes, Stack size 8 bytes, stp_in.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stpapi_stpm_find
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_stpapi_port_find
</UL>

<P><STRONG><a name="[14a]"></a>STP_IN_stpm_get_state</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, stp_in.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stpapi_stpm_find
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>

<P><STRONG><a name="[14c]"></a>STP_IN_stpm_get_name_by_vlan_id</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, stp_in.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_stpm_get_the_list
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[118]"></a>STP_IN_enable_port</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, stp_in.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = STP_IN_enable_port &rArr; _stp_in_enable_port_on_stpm &rArr; STP_port_init &rArr; STP_OUT_get_port_oper_speed &rArr; Get_Oper_speed &rArr; HAL_ETH_ReadPHYRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_stpm_update
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_stpm_get_the_list
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_OUT_flush_lt
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_stp_in_enable_port_on_stpm
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSTP
</UL>

<P><STRONG><a name="[150]"></a>STP_IN_changed_port_speed</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, stp_in.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_stpm_get_the_list
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_stpapi_port_find
</UL>

<P><STRONG><a name="[151]"></a>STP_IN_changed_port_duplex</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, stp_in.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_stpm_get_the_list
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_stpapi_port_find
</UL>

<P><STRONG><a name="[d3]"></a>STP_IN_check_bpdu_header</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, stp_in.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = STP_IN_check_bpdu_header &rArr; ntohs
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_RX_PACKET
</UL>

<P><STRONG><a name="[119]"></a>STP_IN_rx_bpdu</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, stp_in.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = STP_IN_rx_bpdu &rArr; _stp_in_enable_port_on_stpm &rArr; STP_port_init &rArr; STP_OUT_get_port_oper_speed &rArr; Get_Oper_speed &rArr; HAL_ETH_ReadPHYRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_stpm_update
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stpapi_stpm_find
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_stpapi_port_find
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_stp_in_enable_port_on_stpm
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_port_rx_bpdu
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSTP
</UL>

<P><STRONG><a name="[117]"></a>STP_IN_one_second</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, stp_in.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = STP_IN_one_second &rArr; STP_stpm_one_second &rArr; STP_stpm_update &rArr; _stp_stpm_iterate_machines
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_stpm_one_second
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_stpm_get_the_list
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSTP
</UL>

<P><STRONG><a name="[116]"></a>STP_IN_stpm_set_cfg</STRONG> (Thumb, 262 bytes, Stack size 80 bytes, stp_in.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = STP_IN_stpm_set_cfg &rArr; _stp_in_stpm_enable &rArr; stp_in_stpm_create &rArr; STP_port_create &rArr; STP_state_mach_create &rArr; calloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_stpm_update_after_bridge_management
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_stpm_check_bridge_priority
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_OUT_get_init_stpm_cfg
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_IN_stpm_get_cfg
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_stp_in_stpm_enable
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stp_in_stpm_create
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stpapi_stpm_find
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_check_stpm_config
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CREATE_RSTP_INSTANCE
</UL>

<P><STRONG><a name="[158]"></a>STP_IN_set_port_cfg</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, stp_in.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_stpm_update
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stpapi_stpm_find
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_stpapi_port_find
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[28c]"></a>STP_IN_get_error_explanation</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stp_in.o(.text), UNUSED)

<P><STRONG><a name="[159]"></a>STP_STPM_IN_create</STRONG> (Thumb, 66 bytes, Stack size 72 bytes, stp_in.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_OUT_get_init_stpm_cfg
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stp_in_stpm_create
</UL>

<P><STRONG><a name="[15a]"></a>STP_IN_stpm_delete</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stp_in.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_stpm_enable
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_stpm_delete
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_OUT_set_hardware_mode
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stpapi_stpm_find
</UL>

<P><STRONG><a name="[15b]"></a>STP_IN_stpm_get_vlan_id_by_name</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, stp_in.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_stpm_get_the_list
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>

<P><STRONG><a name="[15d]"></a>STP_IN_get_is_stpm_enabled</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stp_in.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stpapi_stpm_find
</UL>

<P><STRONG><a name="[15e]"></a>STP_IN_stop_all</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stp_in.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_stpm_get_the_list
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_stpm_enable
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_OUT_set_hardware_mode
</UL>

<P><STRONG><a name="[15f]"></a>STP_IN_delete_all</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stp_in.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_stpm_get_the_list
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_stpm_enable
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_stpm_delete
</UL>

<P><STRONG><a name="[28d]"></a>STP_OUT_set_which_port</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stp_to.o(.text), UNUSED)

<P><STRONG><a name="[160]"></a>STP_OUT_set_port_state</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stp_to.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = STP_OUT_set_port_state &rArr; Set_Switch_Port_state &rArr; HAL_ETH_WritePHYRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Switch_Port_state
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_sttrans_enter_state
</UL>

<P><STRONG><a name="[168]"></a>STP_OUT_get_port_mac</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stp_to.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = STP_OUT_get_port_mac
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_bpdu_header
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_compute_bridge_id
</UL>

<P><STRONG><a name="[115]"></a>STP_OUT_get_port_link_status</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stp_to.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = STP_OUT_get_port_link_status &rArr; Get_Port_status &rArr; HAL_ETH_ReadPHYRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Port_status
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSTP
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_port_init
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CREATE_RSTP_INSTANCE
</UL>

<P><STRONG><a name="[14e]"></a>STP_OUT_flush_lt</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stp_to.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = STP_OUT_flush_lt &rArr; Flush_Move_ATUentry &rArr; HAL_ETH_WritePHYRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flush_Move_ATUentry
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTcPropBridge
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_stpm_start
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_IN_enable_port
</UL>

<P><STRONG><a name="[143]"></a>STP_OUT_set_hardware_mode</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stp_to.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_IN_stop_all
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_IN_stpm_delete
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_stp_in_stpm_enable
</UL>

<P><STRONG><a name="[161]"></a>STP_OUT_tx_bpdu</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stp_to.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = STP_OUT_tx_bpdu &rArr; ETH_TX_PACKET &rArr; HAL_ETH_TransmitFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_TX_PACKET
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txRstp
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_transmit_enter_state
</UL>

<P><STRONG><a name="[124]"></a>STP_OUT_get_port_name</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stp_to.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = STP_OUT_get_port_name &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_port_create
</UL>

<P><STRONG><a name="[163]"></a>STP_OUT_get_deafult_port_path_cost</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stp_to.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Port_cost
</UL>

<P><STRONG><a name="[121]"></a>STP_OUT_get_port_oper_speed</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stp_to.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = STP_OUT_get_port_oper_speed &rArr; Get_Oper_speed &rArr; HAL_ETH_ReadPHYRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Oper_speed
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_port_init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_pcost_enter_state
</UL>

<P><STRONG><a name="[120]"></a>STP_OUT_get_duplex</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stp_to.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = STP_OUT_get_duplex &rArr; Get_Port_duplex &rArr; HAL_ETH_ReadPHYRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Port_duplex
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_p2p_enter_state
</UL>

<P><STRONG><a name="[154]"></a>STP_OUT_get_init_stpm_cfg</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stp_to.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_STPM_IN_create
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_IN_stpm_set_cfg
</UL>

<P><STRONG><a name="[126]"></a>STP_OUT_get_init_port_cfg</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stp_to.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_port_create
</UL>

<P><STRONG><a name="[28e]"></a>funct</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stpm.o(.text), UNUSED)

<P><STRONG><a name="[165]"></a>_stp_stpm_init_data</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, stpm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _stp_stpm_init_data &rArr; STP_VECT_create
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_copy_times
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_VECT_create
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_stpm_start
</UL>

<P><STRONG><a name="[14f]"></a>STP_stpm_update</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, stpm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = STP_stpm_update &rArr; _stp_stpm_iterate_machines
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_stp_stpm_iterate_machines
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_stpm_start
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_stpm_one_second
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_IN_set_port_cfg
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_IN_rx_bpdu
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_IN_enable_port
</UL>

<P><STRONG><a name="[153]"></a>STP_stpm_one_second</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, stpm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = STP_stpm_one_second &rArr; STP_stpm_update &rArr; _stp_stpm_iterate_machines
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_stpm_update
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_IN_one_second
</UL>

<P><STRONG><a name="[140]"></a>STP_stpm_create</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, stpm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = STP_stpm_create &rArr; STP_state_mach_create &rArr; calloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_state_mach_create
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stp_in_stpm_create
</UL>

<P><STRONG><a name="[28f]"></a>STP_stpm_stop</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stpm.o(.text), UNUSED)

<P><STRONG><a name="[156]"></a>STP_stpm_check_bridge_priority</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stpm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = STP_stpm_check_bridge_priority &rArr; STP_VECT_compare_bridge_id &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_VECT_compare_bridge_id
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_stpm_start
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_IN_stpm_set_cfg
</UL>

<P><STRONG><a name="[167]"></a>STP_compute_bridge_id</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stpm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = STP_compute_bridge_id &rArr; STP_OUT_get_port_mac
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_OUT_get_port_mac
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_stpm_start
</UL>

<P><STRONG><a name="[169]"></a>STP_stpm_start</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, stpm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = STP_stpm_start &rArr; STP_OUT_flush_lt &rArr; Flush_Move_ATUentry &rArr; HAL_ETH_WritePHYRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_compute_bridge_id
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_stp_stpm_init_data
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_stp_stpm_iterate_machines
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_stpm_update
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_stpm_check_bridge_priority
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_OUT_flush_lt
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_port_init
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_stpm_enable
</UL>

<P><STRONG><a name="[144]"></a>STP_stpm_enable</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, stpm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = STP_stpm_enable &rArr; STP_stpm_start &rArr; STP_OUT_flush_lt &rArr; Flush_Move_ATUentry &rArr; HAL_ETH_WritePHYRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_stpm_start
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_stpm_delete
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_IN_delete_all
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_IN_stop_all
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_IN_stpm_delete
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_stp_in_stpm_enable
</UL>

<P><STRONG><a name="[141]"></a>STP_stpm_delete</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, stpm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = STP_stpm_delete &rArr; STP_stpm_enable &rArr; STP_stpm_start &rArr; STP_OUT_flush_lt &rArr; Flush_Move_ATUentry &rArr; HAL_ETH_WritePHYRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_stpm_enable
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_state_mach_delete
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_port_delete
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_IN_delete_all
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_IN_stpm_delete
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_stp_in_stpm_enable
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stp_in_stpm_create
</UL>

<P><STRONG><a name="[13e]"></a>STP_stpm_get_the_list</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stpm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_IN_delete_all
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_IN_stop_all
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_IN_stpm_get_vlan_id_by_name
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_IN_changed_port_duplex
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_IN_changed_port_speed
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_IN_stpm_get_name_by_vlan_id
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_stp_in_stpm_enable
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stpapi_stpm_find
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_IN_one_second
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_IN_enable_port
</UL>

<P><STRONG><a name="[157]"></a>STP_stpm_update_after_bridge_management</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stpm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_IN_stpm_set_cfg
</UL>

<P><STRONG><a name="[290]"></a>STP_stpm_get_port_name_by_id</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stpm.o(.text), UNUSED)

<P><STRONG><a name="[7d]"></a>STP_sttrans_get_state_name</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sttrans.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> port.o(.text)
</UL>
<P><STRONG><a name="[7f]"></a>STP_sttrans_enter_state</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, sttrans.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = STP_sttrans_enter_state &rArr; STP_OUT_set_port_state &rArr; Set_Switch_Port_state &rArr; HAL_ETH_WritePHYRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_OUT_set_port_state
</UL>
<BR>[Address Reference Count : 1]<UL><LI> port.o(.text)
</UL>
<P><STRONG><a name="[7e]"></a>STP_sttrans_check_conditions</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, sttrans.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_hop_2_state
</UL>
<BR>[Address Reference Count : 1]<UL><LI> port.o(.text)
</UL>
<P><STRONG><a name="[138]"></a>STP_compare_times</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, times.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updtRolesBridge
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcvBpdu
</UL>

<P><STRONG><a name="[131]"></a>STP_get_times</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, times.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = STP_get_times &rArr; ntohs
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_info_rx_bpdu
</UL>

<P><STRONG><a name="[16a]"></a>STP_set_times</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, times.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = STP_set_times &rArr; htons
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_config_bpdu
</UL>

<P><STRONG><a name="[12a]"></a>STP_copy_times</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, times.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_stp_stpm_init_data
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updtRootPrio
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updtRolesBridge
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_info_enter_state
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_port_init
</UL>

<P><STRONG><a name="[68]"></a>STP_topoch_get_state_name</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, topoch.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> port.o(.text)
</UL>
<P><STRONG><a name="[6a]"></a>STP_topoch_enter_state</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, topoch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = STP_topoch_enter_state &rArr; setTcPropBridge &rArr; STP_OUT_flush_lt &rArr; Flush_Move_ATUentry &rArr; HAL_ETH_WritePHYRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newTcWhile
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTcPropBridge
</UL>
<BR>[Address Reference Count : 1]<UL><LI> port.o(.text)
</UL>
<P><STRONG><a name="[69]"></a>STP_topoch_check_conditions</STRONG> (Thumb, 168 bytes, Stack size 0 bytes, topoch.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_hop_2_state
</UL>
<BR>[Address Reference Count : 1]<UL><LI> port.o(.text)
</UL>
<P><STRONG><a name="[80]"></a>STP_transmit_get_state_name</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, transmit.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> port.o(.text)
</UL>
<P><STRONG><a name="[82]"></a>STP_transmit_enter_state</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, transmit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = STP_transmit_enter_state &rArr; txRstp &rArr; build_config_bpdu &rArr; STP_VECT_set_vector &rArr; stp_vect_set_bridge_id &rArr; stp_vect_set_short &rArr; htons
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txRstp
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_config_bpdu
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_bpdu_header
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_OUT_tx_bpdu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> port.o(.text)
</UL>
<P><STRONG><a name="[81]"></a>STP_transmit_check_conditions</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, transmit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_hop_2_state
</UL>
<BR>[Address Reference Count : 1]<UL><LI> port.o(.text)
</UL>
<P><STRONG><a name="[172]"></a>Print_packet</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, transmit.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[137]"></a>STP_VECT_compare_bridge_id</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, vector.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = STP_VECT_compare_bridge_id &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_stpm_check_bridge_priority
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updtRolesBridge
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_VECT_compare_vector
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcvBpdu
</UL>

<P><STRONG><a name="[132]"></a>STP_VECT_copy</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, vector.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_rolesel_update_stpm
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updtRootPrio
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_info_enter_state
</UL>

<P><STRONG><a name="[129]"></a>STP_VECT_create</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, vector.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = STP_VECT_create
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_stp_stpm_init_data
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_rolesel_update_stpm
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updtRolesBridge
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_port_init
</UL>

<P><STRONG><a name="[136]"></a>STP_VECT_compare_vector</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, vector.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = STP_VECT_compare_vector &rArr; STP_VECT_compare_bridge_id &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_VECT_compare_bridge_id
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_rolesel_update_stpm
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updtRootPrio
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updtRolesBridge
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcvBpdu
</UL>

<P><STRONG><a name="[130]"></a>STP_VECT_get_vector</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, vector.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = STP_VECT_get_vector &rArr; stp_vect_get_bridge_id &rArr; stp_vect_get_short &rArr; ntohs
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stp_vect_get_bridge_id
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stp_vect_get_short
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_info_rx_bpdu
</UL>

<P><STRONG><a name="[170]"></a>STP_VECT_set_vector</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, vector.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = STP_VECT_set_vector &rArr; stp_vect_set_bridge_id &rArr; stp_vect_set_short &rArr; htons
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stp_vect_set_bridge_id
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stp_vect_set_short
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_config_bpdu
</UL>

<P><STRONG><a name="[17a]"></a>HAL_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[179]"></a>HAL_Init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, stm32f4xx_hal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>

<P><STRONG><a name="[17c]"></a>HAL_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DeInit
</UL>

<P><STRONG><a name="[17b]"></a>HAL_DeInit</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f4xx_hal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspDeInit
</UL>

<P><STRONG><a name="[a1]"></a>HAL_IncTick</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[184]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NOR_GetStatus
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_GetECC
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAM_SendCommand
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_IsDeviceReady
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnMasterAddressFlagUntilTimeout
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_PollForTransfer
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
</UL>

<P><STRONG><a name="[291]"></a>HAL_Get0_1ms</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[ee]"></a>HAL_Delay</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32f4xx_hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SDRAM_Initialization_Sequence
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Start
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_ConfigDMA
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_ConfigMAC
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Stop
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_FlushTransmitFIFO
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACDMAConfig
</UL>

<P><STRONG><a name="[292]"></a>HAL_GetHalVersion</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[293]"></a>HAL_GetREVID</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[294]"></a>HAL_GetDEVID</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[295]"></a>HAL_EnableDBGSleepMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[296]"></a>HAL_DisableDBGSleepMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[297]"></a>HAL_EnableDBGStopMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[298]"></a>HAL_DisableDBGStopMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[299]"></a>HAL_EnableDBGStandbyMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[29a]"></a>HAL_DisableDBGStandbyMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[29b]"></a>HAL_EnableCompensationCell</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[29c]"></a>HAL_DisableCompensationCell</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[29d]"></a>HAL_EnableMemorySwappingBank</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[29e]"></a>HAL_DisableMemorySwappingBank</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[d8]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[d9]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f4xx_hal_cortex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[da]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[29f]"></a>HAL_NVIC_DisableIRQ</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text), UNUSED)

<P><STRONG><a name="[2a0]"></a>HAL_NVIC_SystemReset</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text), UNUSED)

<P><STRONG><a name="[112]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[2a1]"></a>HAL_NVIC_GetPriorityGrouping</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text), UNUSED)

<P><STRONG><a name="[2a2]"></a>HAL_NVIC_GetPriority</STRONG> (Thumb, 76 bytes, Stack size 20 bytes, stm32f4xx_hal_cortex.o(.text), UNUSED)

<P><STRONG><a name="[2a3]"></a>HAL_NVIC_SetPendingIRQ</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text), UNUSED)

<P><STRONG><a name="[2a4]"></a>HAL_NVIC_GetPendingIRQ</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text), UNUSED)

<P><STRONG><a name="[2a5]"></a>HAL_NVIC_ClearPendingIRQ</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text), UNUSED)

<P><STRONG><a name="[2a6]"></a>HAL_NVIC_GetActive</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text), UNUSED)

<P><STRONG><a name="[110]"></a>HAL_SYSTICK_CLKSourceConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[17f]"></a>HAL_SYSTICK_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_IRQHandler
</UL>

<P><STRONG><a name="[17e]"></a>HAL_SYSTICK_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Callback
</UL>

<P><STRONG><a name="[2a7]"></a>HAL_DMA_Init</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, stm32f4xx_hal_dma.o(.text), UNUSED)

<P><STRONG><a name="[2a8]"></a>HAL_DMA_DeInit</STRONG> (Thumb, 2436 bytes, Stack size 36 bytes, stm32f4xx_hal_dma.o(.text), UNUSED)

<P><STRONG><a name="[180]"></a>HAL_DMA_Start</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, stm32f4xx_hal_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetConfig
</UL>

<P><STRONG><a name="[182]"></a>HAL_DMA_Start_IT</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, stm32f4xx_hal_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_Write_DMA
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_Read_DMA
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_PWMN_Start_DMA
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_OCN_Start_DMA
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_HallSensor_Start_DMA
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_DMABurst_ReadStart
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_DMABurst_WriteStart
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_Start_DMA
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Start_DMA
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start_DMA
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Start_DMA
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_DMA
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_DMA
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_DMA
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read_DMA
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write_DMA
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Slave_Receive_DMA
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Slave_Transmit_DMA
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive_DMA
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit_DMA
</UL>

<P><STRONG><a name="[183]"></a>HAL_DMA_Abort</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32f4xx_hal_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DMAStop
</UL>

<P><STRONG><a name="[185]"></a>HAL_DMA_PollForTransfer</STRONG> (Thumb, 3768 bytes, Stack size 56 bytes, stm32f4xx_hal_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>

<P><STRONG><a name="[2a9]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 3408 bytes, Stack size 40 bytes, stm32f4xx_hal_dma.o(.text), UNUSED)

<P><STRONG><a name="[2aa]"></a>HAL_DMA_GetState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(.text), UNUSED)

<P><STRONG><a name="[2ab]"></a>HAL_DMA_GetError</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(.text), UNUSED)

<P><STRONG><a name="[187]"></a>HAL_ETH_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_eth.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Init
</UL>

<P><STRONG><a name="[df]"></a>HAL_ETH_Init</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, stm32f4xx_hal_eth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_ETH_Init &rArr; ETH_MACDMAConfig &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_MspInit
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACDMAConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Configuration
</UL>

<P><STRONG><a name="[189]"></a>HAL_ETH_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_eth.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_DeInit
</UL>

<P><STRONG><a name="[188]"></a>HAL_ETH_DeInit</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f4xx_hal_eth.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_MspDeInit
</UL>

<P><STRONG><a name="[e0]"></a>HAL_ETH_DMATxDescListInit</STRONG> (Thumb, 112 bytes, Stack size 28 bytes, stm32f4xx_hal_eth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_ETH_DMATxDescListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Configuration
</UL>

<P><STRONG><a name="[e1]"></a>HAL_ETH_DMARxDescListInit</STRONG> (Thumb, 106 bytes, Stack size 28 bytes, stm32f4xx_hal_eth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_ETH_DMARxDescListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Configuration
</UL>

<P><STRONG><a name="[ce]"></a>HAL_ETH_TransmitFrame</STRONG> (Thumb, 260 bytes, Stack size 20 bytes, stm32f4xx_hal_eth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_ETH_TransmitFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_EXCS
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_TX_PACKET
</UL>

<P><STRONG><a name="[d0]"></a>HAL_ETH_GetReceivedFrame</STRONG> (Thumb, 194 bytes, Stack size 8 bytes, stm32f4xx_hal_eth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_ETH_GetReceivedFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_EXCS
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_RX_PACKET
</UL>

<P><STRONG><a name="[2ac]"></a>HAL_ETH_GetReceivedFrame_IT</STRONG> (Thumb, 134 bytes, Stack size 12 bytes, stm32f4xx_hal_eth.o(.text), UNUSED)

<P><STRONG><a name="[18d]"></a>HAL_ETH_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_eth.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_IRQHandler
</UL>

<P><STRONG><a name="[18c]"></a>HAL_ETH_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_eth.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_IRQHandler
</UL>

<P><STRONG><a name="[18b]"></a>HAL_ETH_RxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_eth.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_IRQHandler
</UL>

<P><STRONG><a name="[18a]"></a>HAL_ETH_IRQHandler</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, stm32f4xx_hal_eth.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_RxCpltCallback
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_TxCpltCallback
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_ErrorCallback
</UL>

<P><STRONG><a name="[e3]"></a>HAL_ETH_ReadPHYRegister</STRONG> (Thumb, 102 bytes, Stack size 20 bytes, stm32f4xx_hal_eth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_ETH_ReadPHYRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_FLOW_CONTROL
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Port_duplex
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Oper_speed
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Port_status
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Switch_Port_state
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_ALL_trunks
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_A_trunk
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_TRUNK_TABLE
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Trunk_port
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_COUNTER_mode
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_PORT_COUNTERs
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_A_CAPTURED_COUNTER
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_ALL_COUNTER
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_PORT_VLAN_VECTOR
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flush_VTU_entry
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOAD_PURGE_VTU
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_VTU_entry
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Manual_learning_mode
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ATU_entry
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flush_Move_ATUentry
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Marvell_MAC_upt
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_aging_time
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WRITE_PHYREGISTER
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;READ_PHYREGISTER
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_PORT_CONTROL1
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_Purge_ATUentry
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSTP_Init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MII_Init
</UL>

<P><STRONG><a name="[e4]"></a>HAL_ETH_WritePHYRegister</STRONG> (Thumb, 96 bytes, Stack size 20 bytes, stm32f4xx_hal_eth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_ETH_WritePHYRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_FLOW_CONTROL
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Switch_Port_state
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_ALL_trunks
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_A_trunk
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_TRUNK_TABLE
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Trunk_port
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_COUNTER_mode
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_PORT_COUNTERs
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_A_CAPTURED_COUNTER
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_ALL_COUNTER
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_PORT_VLAN_VECTOR
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flush_VTU_entry
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOAD_PURGE_VTU
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_VTU_entry
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ATU_entry
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flush_Move_ATUentry
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Marvell_MAC_upt
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_aging_time
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WRITE_PHYREGISTER
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;READ_PHYREGISTER
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_Purge_ATUentry
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSTP_Init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MII_Init
</UL>

<P><STRONG><a name="[d5]"></a>HAL_ETH_Start</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, stm32f4xx_hal_eth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_ETH_Start &rArr; ETH_FlushTransmitFIFO &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_FlushTransmitFIFO
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_EXCS
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSTP
</UL>

<P><STRONG><a name="[18f]"></a>HAL_ETH_Stop</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, stm32f4xx_hal_eth.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_FlushTransmitFIFO
</UL>

<P><STRONG><a name="[190]"></a>HAL_ETH_ConfigMAC</STRONG> (Thumb, 298 bytes, Stack size 24 bytes, stm32f4xx_hal_eth.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>

<P><STRONG><a name="[191]"></a>HAL_ETH_ConfigDMA</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, stm32f4xx_hal_eth.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>

<P><STRONG><a name="[2ad]"></a>HAL_ETH_GetState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal_eth.o(.text), UNUSED)

<P><STRONG><a name="[db]"></a>HAL_GPIO_Init</STRONG> (Thumb, 454 bytes, Stack size 36 bytes, stm32f4xx_hal_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_MCOConfig
</UL>

<P><STRONG><a name="[2ae]"></a>HAL_GPIO_DeInit</STRONG> (Thumb, 144 bytes, Stack size 28 bytes, stm32f4xx_hal_gpio.o(.text), UNUSED)

<P><STRONG><a name="[aa]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_DIAL_Mode
</UL>

<P><STRONG><a name="[ac]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blink_LED_RUN
</UL>

<P><STRONG><a name="[2af]"></a>HAL_GPIO_TogglePin</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(.text), UNUSED)

<P><STRONG><a name="[193]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[192]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f4xx_hal_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>

<P><STRONG><a name="[194]"></a>HAL_I2C_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>

<P><STRONG><a name="[e6]"></a>HAL_I2C_Init</STRONG> (Thumb, 240 bytes, Stack size 8 bytes, stm32f4xx_hal_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_I2C_Init &rArr; HAL_RCC_GetPCLK1Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Configuration
</UL>

<P><STRONG><a name="[196]"></a>HAL_I2C_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_i2c.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_DeInit
</UL>

<P><STRONG><a name="[195]"></a>HAL_I2C_DeInit</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32f4xx_hal_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspDeInit
</UL>

<P><STRONG><a name="[19a]"></a>HAL_I2C_Master_Transmit</STRONG> (Thumb, 218 bytes, Stack size 32 bytes, stm32f4xx_hal_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterRequestWrite
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
</UL>

<P><STRONG><a name="[19c]"></a>HAL_I2C_Master_Receive</STRONG> (Thumb, 418 bytes, Stack size 40 bytes, stm32f4xx_hal_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterRequestRead
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
</UL>

<P><STRONG><a name="[19d]"></a>HAL_I2C_Slave_Transmit</STRONG> (Thumb, 270 bytes, Stack size 32 bytes, stm32f4xx_hal_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
</UL>

<P><STRONG><a name="[19e]"></a>HAL_I2C_Slave_Receive</STRONG> (Thumb, 236 bytes, Stack size 32 bytes, stm32f4xx_hal_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
</UL>

<P><STRONG><a name="[19f]"></a>HAL_I2C_Master_Transmit_IT</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, stm32f4xx_hal_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterRequestWrite
</UL>

<P><STRONG><a name="[1a0]"></a>HAL_I2C_Master_Receive_IT</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, stm32f4xx_hal_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterRequestRead
</UL>

<P><STRONG><a name="[2b0]"></a>HAL_I2C_Slave_Transmit_IT</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, stm32f4xx_hal_i2c.o(.text), UNUSED)

<P><STRONG><a name="[2b1]"></a>HAL_I2C_Slave_Receive_IT</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, stm32f4xx_hal_i2c.o(.text), UNUSED)

<P><STRONG><a name="[1a1]"></a>HAL_I2C_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ER_IRQHandler
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DMAMemReceiveCplt
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DMAMemTransmitCplt
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DMASlaveReceiveCplt
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DMASlaveTransmitCplt
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DMAMasterReceiveCplt
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DMAMasterTransmitCplt
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DMAError
</UL>

<P><STRONG><a name="[1a2]"></a>HAL_I2C_MasterTxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransmit_BTF
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DMAMasterTransmitCplt
</UL>

<P><STRONG><a name="[1a3]"></a>HAL_I2C_Master_Transmit_DMA</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, stm32f4xx_hal_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterRequestWrite
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[1a4]"></a>HAL_I2C_MasterRxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterReceive_RXNE
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterReceive_BTF
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DMAMasterReceiveCplt
</UL>

<P><STRONG><a name="[1a5]"></a>HAL_I2C_Master_Receive_DMA</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, stm32f4xx_hal_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterRequestRead
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[1a6]"></a>HAL_I2C_SlaveTxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ER_IRQHandler
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DMASlaveTransmitCplt
</UL>

<P><STRONG><a name="[1a7]"></a>HAL_I2C_Slave_Transmit_DMA</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, stm32f4xx_hal_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[1a8]"></a>HAL_I2C_SlaveRxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_EV_IRQHandler
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DMASlaveReceiveCplt
</UL>

<P><STRONG><a name="[1a9]"></a>HAL_I2C_Slave_Receive_DMA</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, stm32f4xx_hal_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[1ab]"></a>HAL_I2C_Mem_Write</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, stm32f4xx_hal_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
</UL>

<P><STRONG><a name="[1ad]"></a>HAL_I2C_Mem_Read</STRONG> (Thumb, 436 bytes, Stack size 40 bytes, stm32f4xx_hal_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
</UL>

<P><STRONG><a name="[1ae]"></a>HAL_I2C_Mem_Write_IT</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, stm32f4xx_hal_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
</UL>

<P><STRONG><a name="[1af]"></a>HAL_I2C_Mem_Read_IT</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, stm32f4xx_hal_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[1b0]"></a>HAL_I2C_MemTxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransmit_BTF
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DMAMemTransmitCplt
</UL>

<P><STRONG><a name="[1b1]"></a>HAL_I2C_Mem_Write_DMA</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, stm32f4xx_hal_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[1b2]"></a>HAL_I2C_MemRxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterReceive_RXNE
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterReceive_BTF
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DMAMemReceiveCplt
</UL>

<P><STRONG><a name="[1b3]"></a>HAL_I2C_Mem_Read_DMA</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, stm32f4xx_hal_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[1b4]"></a>HAL_I2C_IsDeviceReady</STRONG> (Thumb, 304 bytes, Stack size 56 bytes, stm32f4xx_hal_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
</UL>

<P><STRONG><a name="[a5]"></a>HAL_I2C_EV_IRQHandler</STRONG> (Thumb, 480 bytes, Stack size 24 bytes, stm32f4xx_hal_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_SlaveRxCpltCallback
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransmit_BTF
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterReceive_RXNE
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterReceive_BTF
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_EV_Handler
</UL>

<P><STRONG><a name="[a7]"></a>HAL_I2C_ER_IRQHandler</STRONG> (Thumb, 290 bytes, Stack size 16 bytes, stm32f4xx_hal_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_SlaveTxCpltCallback
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ErrorCallback
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_ER_Handler
</UL>

<P><STRONG><a name="[2b2]"></a>HAL_I2C_GetState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal_i2c.o(.text), UNUSED)

<P><STRONG><a name="[2b3]"></a>HAL_I2C_GetError</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal_i2c.o(.text), UNUSED)

<P><STRONG><a name="[2b4]"></a>HAL_RCC_DeInit</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, stm32f4xx_hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[10e]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 770 bytes, Stack size 40 bytes, stm32f4xx_hal_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[1b8]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 120 bytes, Stack size 12 bytes, stm32f4xx_hal_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>

<P><STRONG><a name="[dd]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 88 bytes, Stack size 4 bytes, stm32f4xx_hal_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMx_Configuration
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
</UL>

<P><STRONG><a name="[10f]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 420 bytes, Stack size 32 bytes, stm32f4xx_hal_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[1b9]"></a>HAL_RCC_MCOConfig</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, stm32f4xx_hal_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>

<P><STRONG><a name="[2b5]"></a>HAL_RCC_EnableCSS</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2b6]"></a>HAL_RCC_DisableCSS</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[111]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, stm32f4xx_hal_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_RCC_GetPCLK1Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[1ba]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, stm32f4xx_hal_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_RCC_GetPCLK2Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[2b7]"></a>HAL_RCC_GetOscConfig</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, stm32f4xx_hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2b8]"></a>HAL_RCC_GetClockConfig</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1bc]"></a>HAL_RCC_CCSCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_NMI_IRQHandler
</UL>

<P><STRONG><a name="[1bb]"></a>HAL_RCC_NMI_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f4xx_hal_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_CCSCallback
</UL>

<P><STRONG><a name="[1be]"></a>HAL_UART_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MultiProcessor_Init
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LIN_Init
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HalfDuplex_Init
</UL>

<P><STRONG><a name="[dc]"></a>HAL_UART_Init</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_UART_Init &rArr; UART_SetConfig &rArr; HAL_RCC_GetPCLK1Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
</UL>

<P><STRONG><a name="[1bf]"></a>HAL_HalfDuplex_Init</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[1c0]"></a>HAL_LIN_Init</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[1c1]"></a>HAL_MultiProcessor_Init</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[1c3]"></a>HAL_UART_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DeInit
</UL>

<P><STRONG><a name="[1c2]"></a>HAL_UART_DeInit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspDeInit
</UL>

<P><STRONG><a name="[a8]"></a>HAL_UART_Transmit</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, stm32f4xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[1c5]"></a>HAL_UART_Receive</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, stm32f4xx_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>

<P><STRONG><a name="[be]"></a>HAL_UART_Transmit_IT</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit
</UL>

<P><STRONG><a name="[c2]"></a>HAL_UART_Receive_IT</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Recieve
</UL>

<P><STRONG><a name="[1c6]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMATransmitCplt
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
</UL>

<P><STRONG><a name="[1c7]"></a>HAL_UART_TxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMATxHalfCplt
</UL>

<P><STRONG><a name="[1c8]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit_IT
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMATransmitCplt
</UL>

<P><STRONG><a name="[1c9]"></a>HAL_UART_Transmit_DMA</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, stm32f4xx_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[1ca]"></a>HAL_UART_RxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMARxHalfCplt
</UL>

<P><STRONG><a name="[1cb]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAReceiveCplt
</UL>

<P><STRONG><a name="[1cc]"></a>HAL_UART_Receive_DMA</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[2b9]"></a>HAL_UART_DMAPause</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(.text), UNUSED)

<P><STRONG><a name="[2ba]"></a>HAL_UART_DMAResume</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(.text), UNUSED)

<P><STRONG><a name="[1cd]"></a>HAL_UART_DMAStop</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
</UL>

<P><STRONG><a name="[a3]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 246 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_UART_IRQHandler &rArr; UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit_IT
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART7_IRQHandler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_IRQHandler
</UL>

<P><STRONG><a name="[2bb]"></a>HAL_LIN_SendBreak</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(.text), UNUSED)

<P><STRONG><a name="[2bc]"></a>HAL_MultiProcessor_EnterMuteMode</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(.text), UNUSED)

<P><STRONG><a name="[2bd]"></a>HAL_MultiProcessor_ExitMuteMode</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(.text), UNUSED)

<P><STRONG><a name="[2be]"></a>HAL_HalfDuplex_EnableTransmitter</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(.text), UNUSED)

<P><STRONG><a name="[2bf]"></a>HAL_HalfDuplex_EnableReceiver</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(.text), UNUSED)

<P><STRONG><a name="[bf]"></a>HAL_UART_GetState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit
</UL>

<P><STRONG><a name="[2c0]"></a>HAL_UART_GetError</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(.text), UNUSED)

<P><STRONG><a name="[c5]"></a>Get_command_gen</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_CLI
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAC_CLI
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLI
</UL>

<P><STRONG><a name="[c1]"></a>Set_comd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Recieve
</UL>

<P><STRONG><a name="[1d1]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 148 bytes, Stack size 20 bytes, stm32f4xx_hal_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_HallSensor_Init
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_Init
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OnePulse_Init
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Init
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Init
</UL>

<P><STRONG><a name="[1d0]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[de]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMx_Configuration
</UL>

<P><STRONG><a name="[1d3]"></a>HAL_TIM_Base_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_DeInit
</UL>

<P><STRONG><a name="[1d2]"></a>HAL_TIM_Base_DeInit</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspDeInit
</UL>

<P><STRONG><a name="[2c1]"></a>HAL_TIM_Base_Start</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[2c2]"></a>HAL_TIM_Base_Stop</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[2c3]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[2c4]"></a>HAL_TIM_Base_Stop_IT</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[1d4]"></a>HAL_TIM_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_DMAError
</UL>

<P><STRONG><a name="[96]"></a>HAL_TIM_DMAError</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_DMAError
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ErrorCallback
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32f4xx_hal_tim_ex.o(.text)
<LI> stm32f4xx_hal_tim.o(.text)
</UL>
<P><STRONG><a name="[1d5]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DMAPeriodElapsedCplt
</UL>

<P><STRONG><a name="[1d6]"></a>HAL_TIM_Base_Start_DMA</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[2c5]"></a>HAL_TIM_Base_Stop_DMA</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[1d8]"></a>HAL_TIM_OC_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Init
</UL>

<P><STRONG><a name="[1d7]"></a>HAL_TIM_OC_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_MspInit
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>

<P><STRONG><a name="[1da]"></a>HAL_TIM_OC_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DeInit
</UL>

<P><STRONG><a name="[1d9]"></a>HAL_TIM_OC_DeInit</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_MspDeInit
</UL>

<P><STRONG><a name="[1dc]"></a>TIM_CCxChannelCmd</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_HallSensor_Stop_DMA
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_HallSensor_Start_DMA
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_HallSensor_Stop_IT
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_HallSensor_Start_IT
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_HallSensor_Stop
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_HallSensor_Start
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_Stop_DMA
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_Start_DMA
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_Stop_IT
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_Start_IT
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_Stop
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_Start
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OnePulse_Stop_IT
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OnePulse_Start_IT
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OnePulse_Stop
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OnePulse_Start
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Stop_DMA
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Start_DMA
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Stop_IT
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Start_IT
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Stop
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Start
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Stop_DMA
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start_DMA
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Stop_IT
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start_IT
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Stop
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Stop_DMA
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Start_DMA
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Stop_IT
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Start_IT
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Stop
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Start
</UL>

<P><STRONG><a name="[1db]"></a>HAL_TIM_OC_Start</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[1dd]"></a>HAL_TIM_OC_Stop</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[1de]"></a>HAL_TIM_OC_Start_IT</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[1df]"></a>HAL_TIM_OC_Stop_IT</STRONG> (Thumb, 178 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[1e0]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_DMADelayPulseCplt
</UL>

<P><STRONG><a name="[97]"></a>HAL_TIM_DMADelayPulseCplt</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_DMADelayPulseCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32f4xx_hal_tim_ex.o(.text)
<LI> stm32f4xx_hal_tim.o(.text)
</UL>
<P><STRONG><a name="[1e1]"></a>HAL_TIM_OC_Start_DMA</STRONG> (Thumb, 226 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[1e2]"></a>HAL_TIM_OC_Stop_DMA</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[1e4]"></a>HAL_TIM_PWM_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
</UL>

<P><STRONG><a name="[1e3]"></a>HAL_TIM_PWM_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_MspInit
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>

<P><STRONG><a name="[1e6]"></a>HAL_TIM_PWM_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_DeInit
</UL>

<P><STRONG><a name="[1e5]"></a>HAL_TIM_PWM_DeInit</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_MspDeInit
</UL>

<P><STRONG><a name="[1e7]"></a>HAL_TIM_PWM_Start</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[1e8]"></a>HAL_TIM_PWM_Stop</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[1e9]"></a>HAL_TIM_PWM_Start_IT</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[1ea]"></a>HAL_TIM_PWM_Stop_IT</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[1eb]"></a>HAL_TIM_PWM_Start_DMA</STRONG> (Thumb, 226 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[1ec]"></a>HAL_TIM_PWM_Stop_DMA</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[1ee]"></a>HAL_TIM_IC_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Init
</UL>

<P><STRONG><a name="[1ed]"></a>HAL_TIM_IC_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_MspInit
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>

<P><STRONG><a name="[1f0]"></a>HAL_TIM_IC_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_DeInit
</UL>

<P><STRONG><a name="[1ef]"></a>HAL_TIM_IC_DeInit</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_MspDeInit
</UL>

<P><STRONG><a name="[1f1]"></a>HAL_TIM_IC_Start</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[1f2]"></a>HAL_TIM_IC_Stop</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[1f3]"></a>HAL_TIM_IC_Start_IT</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[1f4]"></a>HAL_TIM_IC_Stop_IT</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[1f5]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_DMACaptureCplt
</UL>

<P><STRONG><a name="[9a]"></a>HAL_TIM_DMACaptureCplt</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_DMACaptureCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32f4xx_hal_tim_ex.o(.text)
<LI> stm32f4xx_hal_tim.o(.text)
</UL>
<P><STRONG><a name="[1f6]"></a>HAL_TIM_IC_Start_DMA</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[1f7]"></a>HAL_TIM_IC_Stop_DMA</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[1f9]"></a>HAL_TIM_OnePulse_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OnePulse_Init
</UL>

<P><STRONG><a name="[1f8]"></a>HAL_TIM_OnePulse_Init</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OnePulse_MspInit
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>

<P><STRONG><a name="[1fb]"></a>HAL_TIM_OnePulse_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OnePulse_DeInit
</UL>

<P><STRONG><a name="[1fa]"></a>HAL_TIM_OnePulse_DeInit</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OnePulse_MspDeInit
</UL>

<P><STRONG><a name="[1fc]"></a>HAL_TIM_OnePulse_Start</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[1fd]"></a>HAL_TIM_OnePulse_Stop</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[1fe]"></a>HAL_TIM_OnePulse_Start_IT</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[1ff]"></a>HAL_TIM_OnePulse_Stop_IT</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[201]"></a>HAL_TIM_Encoder_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_Init
</UL>

<P><STRONG><a name="[200]"></a>HAL_TIM_Encoder_Init</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_MspInit
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>

<P><STRONG><a name="[203]"></a>HAL_TIM_Encoder_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_DeInit
</UL>

<P><STRONG><a name="[202]"></a>HAL_TIM_Encoder_DeInit</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_MspDeInit
</UL>

<P><STRONG><a name="[204]"></a>HAL_TIM_Encoder_Start</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[205]"></a>HAL_TIM_Encoder_Stop</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[206]"></a>HAL_TIM_Encoder_Start_IT</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[207]"></a>HAL_TIM_Encoder_Stop_IT</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[208]"></a>HAL_TIM_Encoder_Start_DMA</STRONG> (Thumb, 274 bytes, Stack size 24 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[209]"></a>HAL_TIM_Encoder_Stop_DMA</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[20c]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DMATriggerCplt
</UL>

<P><STRONG><a name="[20a]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[a2]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 412 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutationCallback
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[210]"></a>TIM_OC2_SetConfig</STRONG> (Thumb, 90 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_HallSensor_Init
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OnePulse_ConfigChannel
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
</UL>

<P><STRONG><a name="[20e]"></a>HAL_TIM_OC_ConfigChannel</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2_SetConfig
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1_SetConfig
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3_SetConfig
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4_SetConfig
</UL>

<P><STRONG><a name="[214]"></a>TIM_TI1_SetConfig</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_HallSensor_Init
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OnePulse_ConfigChannel
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_ConfigChannel
</UL>

<P><STRONG><a name="[213]"></a>HAL_TIM_IC_ConfigChannel</STRONG> (Thumb, 260 bytes, Stack size 24 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_SetConfig
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI2_SetConfig
</UL>

<P><STRONG><a name="[216]"></a>HAL_TIM_PWM_ConfigChannel</STRONG> (Thumb, 246 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2_SetConfig
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1_SetConfig
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3_SetConfig
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4_SetConfig
</UL>

<P><STRONG><a name="[217]"></a>HAL_TIM_OnePulse_ConfigChannel</STRONG> (Thumb, 212 bytes, Stack size 48 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_SetConfig
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2_SetConfig
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI2_SetConfig
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1_SetConfig
</UL>

<P><STRONG><a name="[218]"></a>HAL_TIM_DMABurst_WriteStart</STRONG> (Thumb, 250 bytes, Stack size 24 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[2c6]"></a>HAL_TIM_DMABurst_WriteStop</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[219]"></a>HAL_TIM_DMABurst_ReadStart</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[2c7]"></a>HAL_TIM_DMABurst_ReadStop</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[2c8]"></a>HAL_TIM_GenerateEvent</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[21a]"></a>HAL_TIM_ConfigOCrefClear</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETR_SetConfig
</UL>

<P><STRONG><a name="[21c]"></a>HAL_TIM_ConfigClockSource</STRONG> (Thumb, 238 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI2_ConfigInputStage
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_ConfigInputStage
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRx_SetConfig
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETR_SetConfig
</UL>

<P><STRONG><a name="[2c9]"></a>HAL_TIM_ConfigTI1Input</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[220]"></a>HAL_TIM_SlaveConfigSynchronization</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI2_ConfigInputStage
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_ConfigInputStage
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETR_SetConfig
</UL>

<P><STRONG><a name="[2ca]"></a>HAL_TIM_ReadCapturedValue</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[2cb]"></a>HAL_TIM_Base_GetState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[2cc]"></a>HAL_TIM_OC_GetState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[2cd]"></a>HAL_TIM_PWM_GetState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[2ce]"></a>HAL_TIM_IC_GetState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[2cf]"></a>HAL_TIM_OnePulse_GetState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[2d0]"></a>HAL_TIM_Encoder_GetState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)

<P><STRONG><a name="[222]"></a>HAL_TIMEx_HallSensor_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_HallSensor_Init
</UL>

<P><STRONG><a name="[221]"></a>HAL_TIMEx_HallSensor_Init</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, stm32f4xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_HallSensor_MspInit
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_SetConfig
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2_SetConfig
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>

<P><STRONG><a name="[224]"></a>HAL_TIMEx_HallSensor_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_HallSensor_DeInit
</UL>

<P><STRONG><a name="[223]"></a>HAL_TIMEx_HallSensor_DeInit</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f4xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_HallSensor_MspDeInit
</UL>

<P><STRONG><a name="[225]"></a>HAL_TIMEx_HallSensor_Start</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f4xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[226]"></a>HAL_TIMEx_HallSensor_Stop</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32f4xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[227]"></a>HAL_TIMEx_HallSensor_Start_IT</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32f4xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[228]"></a>HAL_TIMEx_HallSensor_Stop_IT</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f4xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[229]"></a>HAL_TIMEx_HallSensor_Start_DMA</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, stm32f4xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[22a]"></a>HAL_TIMEx_HallSensor_Stop_DMA</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f4xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[22b]"></a>HAL_TIMEx_OCN_Start</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f4xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxNChannelCmd
</UL>

<P><STRONG><a name="[22d]"></a>HAL_TIMEx_OCN_Stop</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, stm32f4xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxNChannelCmd
</UL>

<P><STRONG><a name="[22e]"></a>HAL_TIMEx_OCN_Start_IT</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, stm32f4xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxNChannelCmd
</UL>

<P><STRONG><a name="[22f]"></a>HAL_TIMEx_OCN_Stop_IT</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, stm32f4xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxNChannelCmd
</UL>

<P><STRONG><a name="[230]"></a>HAL_TIMEx_OCN_Start_DMA</STRONG> (Thumb, 210 bytes, Stack size 16 bytes, stm32f4xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxNChannelCmd
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[231]"></a>HAL_TIMEx_OCN_Stop_DMA</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, stm32f4xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxNChannelCmd
</UL>

<P><STRONG><a name="[232]"></a>HAL_TIMEx_PWMN_Start</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f4xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxNChannelCmd
</UL>

<P><STRONG><a name="[233]"></a>HAL_TIMEx_PWMN_Stop</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, stm32f4xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxNChannelCmd
</UL>

<P><STRONG><a name="[234]"></a>HAL_TIMEx_PWMN_Start_IT</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, stm32f4xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxNChannelCmd
</UL>

<P><STRONG><a name="[235]"></a>HAL_TIMEx_PWMN_Stop_IT</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, stm32f4xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxNChannelCmd
</UL>

<P><STRONG><a name="[236]"></a>HAL_TIMEx_PWMN_Start_DMA</STRONG> (Thumb, 210 bytes, Stack size 16 bytes, stm32f4xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxNChannelCmd
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[237]"></a>HAL_TIMEx_PWMN_Stop_DMA</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, stm32f4xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxNChannelCmd
</UL>

<P><STRONG><a name="[238]"></a>HAL_TIMEx_OnePulseN_Start</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f4xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxNChannelCmd
</UL>

<P><STRONG><a name="[239]"></a>HAL_TIMEx_OnePulseN_Stop</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, stm32f4xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxNChannelCmd
</UL>

<P><STRONG><a name="[23a]"></a>HAL_TIMEx_OnePulseN_Start_IT</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32f4xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxNChannelCmd
</UL>

<P><STRONG><a name="[23b]"></a>HAL_TIMEx_OnePulseN_Stop_IT</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, stm32f4xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxNChannelCmd
</UL>

<P><STRONG><a name="[2d1]"></a>HAL_TIMEx_ConfigCommutationEvent</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, stm32f4xx_hal_tim_ex.o(.text), UNUSED)

<P><STRONG><a name="[2d2]"></a>HAL_TIMEx_ConfigCommutationEvent_IT</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, stm32f4xx_hal_tim_ex.o(.text), UNUSED)

<P><STRONG><a name="[20d]"></a>HAL_TIMEx_CommutationCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_DMACommutationCplt
</UL>

<P><STRONG><a name="[98]"></a>HAL_TIMEx_DMACommutationCplt</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f4xx_hal_tim_ex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIMEx_DMACommutationCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutationCallback
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32f4xx_hal_tim_ex.o(.text)
<LI> stm32f4xx_hal_tim.o(.text)
</UL>
<P><STRONG><a name="[2d3]"></a>HAL_TIMEx_ConfigCommutationEvent_DMA</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, stm32f4xx_hal_tim_ex.o(.text), UNUSED)

<P><STRONG><a name="[2d4]"></a>HAL_TIMEx_MasterConfigSynchronization</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, stm32f4xx_hal_tim_ex.o(.text), UNUSED)

<P><STRONG><a name="[2d5]"></a>HAL_TIMEx_ConfigBreakDeadTime</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, stm32f4xx_hal_tim_ex.o(.text), UNUSED)

<P><STRONG><a name="[2d6]"></a>HAL_TIMEx_RemapConfig</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(.text), UNUSED)

<P><STRONG><a name="[20b]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[2d7]"></a>HAL_TIMEx_HallSensor_GetState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(.text), UNUSED)

<P><STRONG><a name="[23c]"></a>HAL_SDRAM_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_sdram.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_Init
</UL>

<P><STRONG><a name="[e8]"></a>HAL_SDRAM_Init</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f4xx_hal_sdram.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_MspInit
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAM_Timing_Init
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDRAM_Configuration
</UL>

<P><STRONG><a name="[240]"></a>HAL_SDRAM_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_sdram.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_DeInit
</UL>

<P><STRONG><a name="[23f]"></a>HAL_SDRAM_DeInit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f4xx_hal_sdram.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_MspDeInit
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAM_DeInit
</UL>

<P><STRONG><a name="[243]"></a>HAL_SDRAM_RefreshErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_sdram.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_IRQHandler
</UL>

<P><STRONG><a name="[242]"></a>HAL_SDRAM_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f4xx_hal_sdram.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_RefreshErrorCallback
</UL>

<P><STRONG><a name="[9b]"></a>HAL_SDRAM_DMA_XferCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_sdram.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_sdram.o(.text)
</UL>
<P><STRONG><a name="[9c]"></a>HAL_SDRAM_DMA_XferErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_sdram.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_sdram.o(.text)
</UL>
<P><STRONG><a name="[2d8]"></a>HAL_SDRAM_Read_8b</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, stm32f4xx_hal_sdram.o(.text), UNUSED)

<P><STRONG><a name="[2d9]"></a>HAL_SDRAM_Write_8b</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, stm32f4xx_hal_sdram.o(.text), UNUSED)

<P><STRONG><a name="[2da]"></a>HAL_SDRAM_Read_16b</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, stm32f4xx_hal_sdram.o(.text), UNUSED)

<P><STRONG><a name="[2db]"></a>HAL_SDRAM_Write_16b</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, stm32f4xx_hal_sdram.o(.text), UNUSED)

<P><STRONG><a name="[2dc]"></a>HAL_SDRAM_Read_32b</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32f4xx_hal_sdram.o(.text), UNUSED)

<P><STRONG><a name="[2dd]"></a>HAL_SDRAM_Write_32b</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32f4xx_hal_sdram.o(.text), UNUSED)

<P><STRONG><a name="[244]"></a>HAL_SDRAM_Read_DMA</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32f4xx_hal_sdram.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[245]"></a>HAL_SDRAM_Write_DMA</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stm32f4xx_hal_sdram.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[246]"></a>HAL_SDRAM_WriteProtection_Enable</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f4xx_hal_sdram.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAM_WriteProtection_Enable
</UL>

<P><STRONG><a name="[248]"></a>HAL_SDRAM_WriteProtection_Disable</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f4xx_hal_sdram.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAM_WriteProtection_Disable
</UL>

<P><STRONG><a name="[ed]"></a>HAL_SDRAM_SendCommand</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, stm32f4xx_hal_sdram.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAM_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SDRAM_Initialization_Sequence
</UL>

<P><STRONG><a name="[24b]"></a>HAL_SDRAM_ProgramRefreshRate</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f4xx_hal_sdram.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAM_ProgramRefreshRate
</UL>

<P><STRONG><a name="[24d]"></a>HAL_SDRAM_SetAutoRefreshNumber</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f4xx_hal_sdram.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAM_SetAutoRefreshNumber
</UL>

<P><STRONG><a name="[24f]"></a>HAL_SDRAM_GetModeStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal_sdram.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAM_GetModeStatus
</UL>

<P><STRONG><a name="[2de]"></a>HAL_SDRAM_GetState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal_sdram.o(.text), UNUSED)

<P><STRONG><a name="[265]"></a>FMC_NORSRAM_Init</STRONG> (Thumb, 100 bytes, Stack size 12 bytes, stm32f4xx_ll_fmc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NOR_Init
</UL>

<P><STRONG><a name="[26a]"></a>FMC_NORSRAM_DeInit</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f4xx_ll_fmc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NOR_DeInit
</UL>

<P><STRONG><a name="[266]"></a>FMC_NORSRAM_Timing_Init</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, stm32f4xx_ll_fmc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NOR_Init
</UL>

<P><STRONG><a name="[267]"></a>FMC_NORSRAM_Extended_Timing_Init</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, stm32f4xx_ll_fmc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NOR_Init
</UL>

<P><STRONG><a name="[26f]"></a>FMC_NORSRAM_WriteOperation_Enable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_ll_fmc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NOR_WriteOperation_Enable
</UL>

<P><STRONG><a name="[271]"></a>FMC_NORSRAM_WriteOperation_Disable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_ll_fmc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NOR_WriteOperation_Disable
</UL>

<P><STRONG><a name="[2df]"></a>FMC_NAND_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f4xx_ll_fmc.o(.text), UNUSED)

<P><STRONG><a name="[2e0]"></a>FMC_NAND_CommonSpace_Timing_Init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f4xx_ll_fmc.o(.text), UNUSED)

<P><STRONG><a name="[2e1]"></a>FMC_NAND_AttributeSpace_Timing_Init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f4xx_ll_fmc.o(.text), UNUSED)

<P><STRONG><a name="[2e2]"></a>FMC_NAND_DeInit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f4xx_ll_fmc.o(.text), UNUSED)

<P><STRONG><a name="[2e3]"></a>FMC_NAND_ECC_Enable</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_ll_fmc.o(.text), UNUSED)

<P><STRONG><a name="[2e4]"></a>FMC_NAND_ECC_Disable</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_ll_fmc.o(.text), UNUSED)

<P><STRONG><a name="[251]"></a>FMC_NAND_GetECC</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, stm32f4xx_ll_fmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>

<P><STRONG><a name="[2e5]"></a>FMC_PCCARD_Init</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_ll_fmc.o(.text), UNUSED)

<P><STRONG><a name="[2e6]"></a>FMC_PCCARD_CommonSpace_Timing_Init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_ll_fmc.o(.text), UNUSED)

<P><STRONG><a name="[2e7]"></a>FMC_PCCARD_AttributeSpace_Timing_Init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_ll_fmc.o(.text), UNUSED)

<P><STRONG><a name="[2e8]"></a>FMC_PCCARD_IOSpace_Timing_Init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_ll_fmc.o(.text), UNUSED)

<P><STRONG><a name="[2e9]"></a>FMC_PCCARD_DeInit</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_ll_fmc.o(.text), UNUSED)

<P><STRONG><a name="[23d]"></a>FMC_SDRAM_Init</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, stm32f4xx_ll_fmc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_Init
</UL>

<P><STRONG><a name="[23e]"></a>FMC_SDRAM_Timing_Init</STRONG> (Thumb, 100 bytes, Stack size 20 bytes, stm32f4xx_ll_fmc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_Init
</UL>

<P><STRONG><a name="[241]"></a>FMC_SDRAM_DeInit</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_ll_fmc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_DeInit
</UL>

<P><STRONG><a name="[247]"></a>FMC_SDRAM_WriteProtection_Enable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_ll_fmc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_WriteProtection_Enable
</UL>

<P><STRONG><a name="[249]"></a>FMC_SDRAM_WriteProtection_Disable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_ll_fmc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_WriteProtection_Disable
</UL>

<P><STRONG><a name="[24a]"></a>FMC_SDRAM_SendCommand</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, stm32f4xx_ll_fmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_SendCommand
</UL>

<P><STRONG><a name="[24c]"></a>FMC_SDRAM_ProgramRefreshRate</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_ll_fmc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_ProgramRefreshRate
</UL>

<P><STRONG><a name="[24e]"></a>FMC_SDRAM_SetAutoRefreshNumber</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_ll_fmc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_SetAutoRefreshNumber
</UL>

<P><STRONG><a name="[250]"></a>FMC_SDRAM_GetModeStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_ll_fmc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_GetModeStatus
</UL>

<P><STRONG><a name="[252]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32f4xx_hal_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetErrorCode
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_AdvOBProgram
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_OBProgram
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_EnableWRP
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_DisableWRP
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_OB_Launch
</UL>

<P><STRONG><a name="[11c]"></a>HAL_FLASH_Program</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, stm32f4xx_hal_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_Byte
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_HalfWord
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_Word
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_DoubleWord
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_InVariate
</UL>

<P><STRONG><a name="[258]"></a>HAL_FLASH_Program_IT</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, stm32f4xx_hal_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_Byte
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_HalfWord
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_Word
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_DoubleWord
</UL>

<P><STRONG><a name="[25b]"></a>HAL_FLASH_OperationErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_IRQHandler
</UL>

<P><STRONG><a name="[25a]"></a>HAL_FLASH_EndOfOperationCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_IRQHandler
</UL>

<P><STRONG><a name="[259]"></a>HAL_FLASH_IRQHandler</STRONG> (Thumb, 246 bytes, Stack size 32 bytes, stm32f4xx_hal_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_EndOfOperationCallback
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_OperationErrorCallback
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Erase_Sector
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetErrorCode
</UL>

<P><STRONG><a name="[11a]"></a>HAL_FLASH_Unlock</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_InVariate
</UL>

<P><STRONG><a name="[11d]"></a>HAL_FLASH_Lock</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_InVariate
</UL>

<P><STRONG><a name="[2ea]"></a>HAL_FLASH_OB_Unlock</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(.text), UNUSED)

<P><STRONG><a name="[2eb]"></a>HAL_FLASH_OB_Lock</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(.text), UNUSED)

<P><STRONG><a name="[25d]"></a>HAL_FLASH_OB_Launch</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[2ec]"></a>HAL_FLASH_GetError</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(.text), UNUSED)

<P><STRONG><a name="[25c]"></a>FLASH_Erase_Sector</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, stm32f4xx_hal_flash_ex.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase_IT
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_IRQHandler
</UL>

<P><STRONG><a name="[11b]"></a>HAL_FLASHEx_Erase</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, stm32f4xx_hal_flash_ex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_FLASHEx_Erase &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_MassErase
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Erase_Sector
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_InVariate
</UL>

<P><STRONG><a name="[25f]"></a>HAL_FLASHEx_Erase_IT</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, stm32f4xx_hal_flash_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_MassErase
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Erase_Sector
</UL>

<P><STRONG><a name="[260]"></a>HAL_FLASHEx_OBProgram</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, stm32f4xx_hal_flash_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_EnableWRP
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_DisableWRP
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[2ed]"></a>HAL_FLASHEx_OBGetConfig</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f4xx_hal_flash_ex.o(.text), UNUSED)

<P><STRONG><a name="[263]"></a>HAL_FLASHEx_AdvOBProgram</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, stm32f4xx_hal_flash_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[2ee]"></a>HAL_FLASHEx_AdvOBGetConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_hal_flash_ex.o(.text), UNUSED)

<P><STRONG><a name="[2ef]"></a>HAL_FLASHEx_OB_SelectPCROP</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_hal_flash_ex.o(.text), UNUSED)

<P><STRONG><a name="[2f0]"></a>HAL_FLASHEx_OB_DeSelectPCROP</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_hal_flash_ex.o(.text), UNUSED)

<P><STRONG><a name="[2f1]"></a>HAL_FLASHEx_OB_GetBank2WRP</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_hal_flash_ex.o(.text), UNUSED)

<P><STRONG><a name="[264]"></a>HAL_NOR_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_nor.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NOR_Init
</UL>

<P><STRONG><a name="[eb]"></a>HAL_NOR_Init</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, stm32f4xx_hal_nor.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NORSRAM_Extended_Timing_Init
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NORSRAM_Timing_Init
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NORSRAM_Init
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NOR_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Configuration
</UL>

<P><STRONG><a name="[269]"></a>HAL_NOR_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_nor.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NOR_DeInit
</UL>

<P><STRONG><a name="[268]"></a>HAL_NOR_DeInit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f4xx_hal_nor.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NORSRAM_DeInit
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NOR_MspDeInit
</UL>

<P><STRONG><a name="[273]"></a>HAL_NOR_MspWait</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_nor.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NOR_GetStatus
</UL>

<P><STRONG><a name="[26b]"></a>HAL_NOR_Read_ID</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, stm32f4xx_hal_nor.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>

<P><STRONG><a name="[2f2]"></a>HAL_NOR_ReturnToReadMode</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f4xx_hal_nor.o(.text), UNUSED)

<P><STRONG><a name="[26c]"></a>HAL_NOR_Read</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, stm32f4xx_hal_nor.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>

<P><STRONG><a name="[26d]"></a>HAL_NOR_Program</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, stm32f4xx_hal_nor.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>

<P><STRONG><a name="[2f3]"></a>HAL_NOR_ReadBuffer</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, stm32f4xx_hal_nor.o(.text), UNUSED)

<P><STRONG><a name="[2f4]"></a>HAL_NOR_ProgramBuffer</STRONG> (Thumb, 118 bytes, Stack size 20 bytes, stm32f4xx_hal_nor.o(.text), UNUSED)

<P><STRONG><a name="[2f5]"></a>HAL_NOR_Erase_Block</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, stm32f4xx_hal_nor.o(.text), UNUSED)

<P><STRONG><a name="[2f6]"></a>HAL_NOR_Erase_Chip</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, stm32f4xx_hal_nor.o(.text), UNUSED)

<P><STRONG><a name="[2f7]"></a>HAL_NOR_Read_CFI</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, stm32f4xx_hal_nor.o(.text), UNUSED)

<P><STRONG><a name="[26e]"></a>HAL_NOR_WriteOperation_Enable</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, stm32f4xx_hal_nor.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NORSRAM_WriteOperation_Enable
</UL>

<P><STRONG><a name="[270]"></a>HAL_NOR_WriteOperation_Disable</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f4xx_hal_nor.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NORSRAM_WriteOperation_Disable
</UL>

<P><STRONG><a name="[2f8]"></a>HAL_NOR_GetState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal_nor.o(.text), UNUSED)

<P><STRONG><a name="[272]"></a>HAL_NOR_GetStatus</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, stm32f4xx_hal_nor.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NOR_MspWait
</UL>

<P><STRONG><a name="[d2]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_RX_PACKET
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modify_the_MAC
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InVariate_Init
</UL>

<P><STRONG><a name="[d1]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_EXCS
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_RX_PACKET
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Configuration
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_VECT_copy
</UL>

<P><STRONG><a name="[2f9]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[274]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[2fa]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[2fb]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[14d]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_IN_stpm_get_name_by_vlan_id
</UL>

<P><STRONG><a name="[2fc]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[2fd]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[275]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[14b]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_IN_stpm_get_name_by_vlan_id
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_IN_stpm_get_state
</UL>

<P><STRONG><a name="[15c]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_IN_stpm_get_vlan_id_by_name
</UL>

<P><STRONG><a name="[173]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_VECT_compare_bridge_id
</UL>

<P><STRONG><a name="[125]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_stpm_create
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_state_mach_create
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_port_create
</UL>

<P><STRONG><a name="[c6]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_CLI
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAC_CLI
</UL>

<P><STRONG><a name="[123]"></a>calloc</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, calloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = calloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_stpm_create
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_state_mach_create
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_port_create
</UL>

<P><STRONG><a name="[276]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[a0]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[2fe]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[278]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[2ff]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[277]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[300]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[301]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[302]"></a>__decompress1</STRONG> (Thumb, 92 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[27a]"></a>__0printf$8</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[303]"></a>__1printf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)

<P><STRONG><a name="[c4]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_TRUNK_TABLE
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Trunk_port
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_VTU_entry
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Marvell_MAC_upt
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_PORT_CONTROL1
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_mask_table
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_trunk_vector
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_InVariate
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDRAM_Configuration
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modify_the_MAC
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_the_MAC
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_CLI
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_CLI
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAC_CLI
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InVariate_Init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Configuration
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_packet
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_stpm_delete
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_stpm_create
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_IN_set_port_cfg
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_state_mach_delete
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_state_mach_create
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_port_delete
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_port_create
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CREATE_RSTP_INSTANCE
</UL>

<P><STRONG><a name="[27c]"></a>__0sprintf$8</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[304]"></a>__1sprintf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)

<P><STRONG><a name="[162]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_OUT_get_port_name
</UL>

<P><STRONG><a name="[305]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[306]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[307]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[12c]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_stpm_delete
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_state_mach_delete
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_port_delete
</UL>

<P><STRONG><a name="[ae]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_Test_for_heap
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[e9]"></a>BSP_SDRAM_Initialization_Sequence</STRONG> (Thumb, 376 bytes, Stack size 32 bytes, veth_hal_init.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_SendCommand
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDRAM_Configuration
</UL>

<P><STRONG><a name="[134]"></a>updtRcvdInfoWhile</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, portinfo.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_info_enter_state
</UL>

<P><STRONG><a name="[133]"></a>rcvBpdu</STRONG> (Thumb, 230 bytes, Stack size 8 bytes, portinfo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = rcvBpdu &rArr; STP_VECT_compare_vector &rArr; STP_VECT_compare_bridge_id &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_compare_times
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_VECT_compare_vector
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_VECT_compare_bridge_id
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_info_enter_state
</UL>

<P><STRONG><a name="[135]"></a>recordProposed</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, portinfo.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_info_enter_state
</UL>

<P><STRONG><a name="[13b]"></a>setRoleSelected</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, rolesel.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updtRolesBridge
</UL>

<P><STRONG><a name="[139]"></a>updtRolesBridge</STRONG> (Thumb, 322 bytes, Stack size 40 bytes, rolesel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = updtRolesBridge &rArr; updtRootPrio &rArr; STP_VECT_compare_vector &rArr; STP_VECT_compare_bridge_id &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updtRootPrio
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRoleSelected
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_compare_times
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_VECT_compare_vector
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_VECT_compare_bridge_id
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_copy_times
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_VECT_create
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_rolesel_enter_state
</UL>

<P><STRONG><a name="[13a]"></a>updtRootPrio</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, rolesel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = updtRootPrio &rArr; STP_VECT_compare_vector &rArr; STP_VECT_compare_bridge_id &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_VECT_copy
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_VECT_compare_vector
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_copy_times
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updtRolesBridge
</UL>

<P><STRONG><a name="[145]"></a>_stp_in_enable_port_on_stpm</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, stp_in.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = _stp_in_enable_port_on_stpm &rArr; STP_port_init &rArr; STP_OUT_get_port_oper_speed &rArr; Get_Oper_speed &rArr; HAL_ETH_ReadPHYRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_stpapi_port_find
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_port_init
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_IN_rx_bpdu
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_IN_enable_port
</UL>

<P><STRONG><a name="[146]"></a>_stpapi_port_find</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stp_in.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_IN_set_port_cfg
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_IN_changed_port_duplex
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_IN_changed_port_speed
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_IN_port_get_state
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_IN_port_get_cfg
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_stp_in_enable_port_on_stpm
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_IN_rx_bpdu
</UL>

<P><STRONG><a name="[155]"></a>_check_stpm_config</STRONG> (Thumb, 204 bytes, Stack size 0 bytes, stp_in.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_IN_stpm_set_cfg
</UL>

<P><STRONG><a name="[88]"></a>_stp_stpm_init_machine</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stpm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _stp_stpm_init_machine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stpm.o(.text)
</UL>
<P><STRONG><a name="[166]"></a>_stp_stpm_iterate_machines</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, stpm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _stp_stpm_iterate_machines
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_stpm_start
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_stpm_update
</UL>

<P><STRONG><a name="[16c]"></a>setTcPropBridge</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, topoch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = setTcPropBridge &rArr; STP_OUT_flush_lt &rArr; Flush_Move_ATUentry &rArr; HAL_ETH_WritePHYRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_OUT_flush_lt
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_topoch_enter_state
</UL>

<P><STRONG><a name="[16d]"></a>newTcWhile</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, topoch.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_topoch_enter_state
</UL>

<P><STRONG><a name="[16e]"></a>build_bpdu_header</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, transmit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = build_bpdu_header &rArr; htons
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_OUT_get_port_mac
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txRstp
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_transmit_enter_state
</UL>

<P><STRONG><a name="[16f]"></a>build_config_bpdu</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, transmit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = build_config_bpdu &rArr; STP_VECT_set_vector &rArr; stp_vect_set_bridge_id &rArr; stp_vect_set_short &rArr; htons
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_VECT_set_vector
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_set_times
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txRstp
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_transmit_enter_state
</UL>

<P><STRONG><a name="[171]"></a>txRstp</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, transmit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = txRstp &rArr; build_config_bpdu &rArr; STP_VECT_set_vector &rArr; stp_vect_set_bridge_id &rArr; stp_vect_set_short &rArr; htons
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_config_bpdu
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_bpdu_header
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_OUT_tx_bpdu
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_transmit_enter_state
</UL>

<P><STRONG><a name="[176]"></a>stp_vect_get_short</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, vector.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = stp_vect_get_short &rArr; ntohs
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stp_vect_get_bridge_id
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_VECT_get_vector
</UL>

<P><STRONG><a name="[178]"></a>stp_vect_set_short</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, vector.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = stp_vect_set_short &rArr; htons
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stp_vect_set_bridge_id
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_VECT_set_vector
</UL>

<P><STRONG><a name="[174]"></a>stp_vect_get_bridge_id</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, vector.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = stp_vect_get_bridge_id &rArr; stp_vect_get_short &rArr; ntohs
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stp_vect_get_short
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_VECT_get_vector
</UL>

<P><STRONG><a name="[177]"></a>stp_vect_set_bridge_id</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, vector.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = stp_vect_set_bridge_id &rArr; stp_vect_set_short &rArr; htons
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stp_vect_set_short
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STP_VECT_set_vector
</UL>

<P><STRONG><a name="[17d]"></a>NVIC_SetPriority</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[181]"></a>DMA_SetConfig</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f4xx_hal_dma.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start
</UL>

<P><STRONG><a name="[186]"></a>ETH_MACDMAConfig</STRONG> (Thumb, 262 bytes, Stack size 16 bytes, stm32f4xx_hal_eth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ETH_MACDMAConfig &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Init
</UL>

<P><STRONG><a name="[18e]"></a>ETH_FlushTransmitFIFO</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, stm32f4xx_hal_eth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ETH_FlushTransmitFIFO &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Start
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Stop
</UL>

<P><STRONG><a name="[197]"></a>I2C_WaitOnFlagUntilTimeout</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, stm32f4xx_hal_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_EV_IRQHandler
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ER_IRQHandler
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_IsDeviceReady
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Slave_Receive_DMA
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Slave_Transmit_DMA
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Slave_Receive
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Slave_Transmit
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransmit_BTF
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterReceive_RXNE
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterReceive_BTF
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DMAMemReceiveCplt
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DMAMemTransmitCplt
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DMASlaveReceiveCplt
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DMASlaveTransmitCplt
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DMAMasterReceiveCplt
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DMAMasterTransmitCplt
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterRequestRead
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterRequestWrite
</UL>

<P><STRONG><a name="[198]"></a>I2C_WaitOnMasterAddressFlagUntilTimeout</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, stm32f4xx_hal_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterRequestRead
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterRequestWrite
</UL>

<P><STRONG><a name="[199]"></a>I2C_MasterRequestWrite</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, stm32f4xx_hal_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnMasterAddressFlagUntilTimeout
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit_DMA
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit_IT
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
</UL>

<P><STRONG><a name="[19b]"></a>I2C_MasterRequestRead</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, stm32f4xx_hal_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnMasterAddressFlagUntilTimeout
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive_DMA
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive_IT
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive
</UL>

<P><STRONG><a name="[8a]"></a>I2C_DMAError</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32f4xx_hal_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_DMAError
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_i2c.o(.text)
</UL>
<P><STRONG><a name="[89]"></a>I2C_DMAMasterTransmitCplt</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, stm32f4xx_hal_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = I2C_DMAMasterTransmitCplt &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MasterTxCpltCallback
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ErrorCallback
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_i2c.o(.text)
</UL>
<P><STRONG><a name="[8b]"></a>I2C_DMAMasterReceiveCplt</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, stm32f4xx_hal_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = I2C_DMAMasterReceiveCplt &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MasterRxCpltCallback
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ErrorCallback
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_i2c.o(.text)
</UL>
<P><STRONG><a name="[8c]"></a>I2C_DMASlaveTransmitCplt</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, stm32f4xx_hal_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = I2C_DMASlaveTransmitCplt &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_SlaveTxCpltCallback
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ErrorCallback
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_i2c.o(.text)
</UL>
<P><STRONG><a name="[8d]"></a>I2C_DMASlaveReceiveCplt</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, stm32f4xx_hal_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = I2C_DMASlaveReceiveCplt &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_SlaveRxCpltCallback
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ErrorCallback
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_i2c.o(.text)
</UL>
<P><STRONG><a name="[1aa]"></a>I2C_RequestMemoryWrite</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, stm32f4xx_hal_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnMasterAddressFlagUntilTimeout
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write_DMA
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write_IT
</UL>

<P><STRONG><a name="[1ac]"></a>I2C_RequestMemoryRead</STRONG> (Thumb, 222 bytes, Stack size 40 bytes, stm32f4xx_hal_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnMasterAddressFlagUntilTimeout
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read_DMA
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read_IT
</UL>

<P><STRONG><a name="[8e]"></a>I2C_DMAMemTransmitCplt</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, stm32f4xx_hal_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = I2C_DMAMemTransmitCplt &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MemTxCpltCallback
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ErrorCallback
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_i2c.o(.text)
</UL>
<P><STRONG><a name="[8f]"></a>I2C_DMAMemReceiveCplt</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, stm32f4xx_hal_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = I2C_DMAMemReceiveCplt &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MemRxCpltCallback
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ErrorCallback
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_i2c.o(.text)
</UL>
<P><STRONG><a name="[1b5]"></a>I2C_MasterReceive_BTF</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, stm32f4xx_hal_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MemRxCpltCallback
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MasterRxCpltCallback
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_EV_IRQHandler
</UL>

<P><STRONG><a name="[1b7]"></a>I2C_MasterReceive_RXNE</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, stm32f4xx_hal_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MemRxCpltCallback
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MasterRxCpltCallback
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_EV_IRQHandler
</UL>

<P><STRONG><a name="[1b6]"></a>I2C_MasterTransmit_BTF</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, stm32f4xx_hal_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MemTxCpltCallback
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MasterTxCpltCallback
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_EV_IRQHandler
</UL>

<P><STRONG><a name="[1bd]"></a>UART_SetConfig</STRONG> (Thumb, 364 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = UART_SetConfig &rArr; HAL_RCC_GetPCLK1Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MultiProcessor_Init
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LIN_Init
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HalfDuplex_Init
</UL>

<P><STRONG><a name="[1c4]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, stm32f4xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMATransmitCplt
</UL>

<P><STRONG><a name="[92]"></a>UART_DMAError</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DMAError
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(.text)
</UL>
<P><STRONG><a name="[91]"></a>UART_DMATxHalfCplt</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DMATxHalfCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(.text)
</UL>
<P><STRONG><a name="[90]"></a>UART_DMATransmitCplt</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART_DMATransmitCplt &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(.text)
</UL>
<P><STRONG><a name="[94]"></a>UART_DMARxHalfCplt</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DMARxHalfCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(.text)
</UL>
<P><STRONG><a name="[93]"></a>UART_DMAReceiveCplt</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DMAReceiveCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(.text)
</UL>
<P><STRONG><a name="[1ce]"></a>UART_Receive_IT</STRONG> (Thumb, 564 bytes, Stack size 40 bytes, stm32f4xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[1cf]"></a>UART_Transmit_IT</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_Transmit_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[95]"></a>TIM_DMAPeriodElapsedCplt</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_DMAPeriodElapsedCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_tim.o(.text)
</UL>
<P><STRONG><a name="[212]"></a>TIM_OC4_SetConfig</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
</UL>

<P><STRONG><a name="[211]"></a>TIM_OC3_SetConfig</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
</UL>

<P><STRONG><a name="[20f]"></a>TIM_OC1_SetConfig</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OnePulse_ConfigChannel
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
</UL>

<P><STRONG><a name="[99]"></a>TIM_DMATriggerCplt</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_DMATriggerCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_tim.o(.text)
</UL>
<P><STRONG><a name="[215]"></a>TIM_TI2_SetConfig</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OnePulse_ConfigChannel
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_ConfigChannel
</UL>

<P><STRONG><a name="[21b]"></a>TIM_ETR_SetConfig</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_SlaveConfigSynchronization
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigOCrefClear
</UL>

<P><STRONG><a name="[21f]"></a>TIM_ITRx_SetConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[21d]"></a>TIM_TI1_ConfigInputStage</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_SlaveConfigSynchronization
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[21e]"></a>TIM_TI2_ConfigInputStage</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_SlaveConfigSynchronization
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[22c]"></a>TIM_CCxNChannelCmd</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f4xx_hal_tim_ex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_OnePulseN_Stop_IT
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_OnePulseN_Start_IT
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_OnePulseN_Stop
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_OnePulseN_Start
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_PWMN_Stop_DMA
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_PWMN_Start_DMA
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_PWMN_Stop_IT
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_PWMN_Start_IT
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_PWMN_Stop
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_PWMN_Start
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_OCN_Stop_DMA
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_OCN_Start_DMA
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_OCN_Stop_IT
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_OCN_Start_IT
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_OCN_Stop
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_OCN_Start
</UL>

<P><STRONG><a name="[253]"></a>FLASH_SetErrorCode</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_IRQHandler
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[254]"></a>FLASH_Program_DoubleWord</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f4xx_hal_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_Program_DoubleWord
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program_IT
</UL>

<P><STRONG><a name="[257]"></a>FLASH_Program_Word</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program_IT
</UL>

<P><STRONG><a name="[256]"></a>FLASH_Program_HalfWord</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program_IT
</UL>

<P><STRONG><a name="[255]"></a>FLASH_Program_Byte</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program_IT
</UL>

<P><STRONG><a name="[25e]"></a>FLASH_MassErase</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, stm32f4xx_hal_flash_ex.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase_IT
</UL>

<P><STRONG><a name="[261]"></a>FLASH_OB_DisableWRP</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, stm32f4xx_hal_flash_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_OBProgram
</UL>

<P><STRONG><a name="[262]"></a>FLASH_OB_EnableWRP</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, stm32f4xx_hal_flash_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_OBProgram
</UL>

<P><STRONG><a name="[27b]"></a>_printf_core</STRONG> (Thumb, 988 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$8
</UL>

<P><STRONG><a name="[27e]"></a>_printf_post_padding</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[27d]"></a>_printf_pre_padding</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[9e]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf8.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0sprintf$8)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
