#include "SerialUtility.h"
#include "SerialServer.h"
#include "uip.h"
uint32_t server_queue_all_length = 0; //添加到串口服务器队列的数据总长度
void initAllQueueArray(){
	int i;
	/* 把所有的队列初始为空值 */
	for(i = 0; i < MAX_QUEUE_NUM; i++){
		//initQueue(array_queue[i].queue);
		server_array_queue[i].queue = NULL;
		server_array_queue[i].empty_queue = 1;
		server_array_queue[i].serial_no = 200;
		/* 结束对串口服务器数组的初始化 */
		
		client_array_queue[i].queue = NULL;
		memset(client_array_queue[i].remote_ip,0,sizeof(client_array_queue[i].remote_ip));
		client_array_queue[i].empty_queue = 1;
		client_array_queue[i].serial_no = 200;
		client_array_queue[i].remote_port = 0;
	}
}
/* 先从所有队列中查找，是否存在的对应的串口队列 
**如果存在则之间添加，如果不存在，则从所有队列中找到一个可用的
**队列，添加。
**/
void addDataToServerQueue(uint8_t *data,uint32_t data_len,uint8_t serial_no){
	int i;
	int queue_index = -1;
	struct queue_node *temp;
	temp = (struct queue_node *)malloc(sizeof(struct queue_node));
	//strcpy(temp->remote_ip,remote_ip);
	//temp->remote_port = remote_port;
	//temp->serial_no = serial_no;
	temp->content_length = data_len;
	temp->content_buf = (uint8_t*)malloc(data_len * sizeof(char));
	if( temp->content_buf == NULL){
		printf("server queue malloc failed\n\r");
	}
	memset(temp->content_buf,0,data_len*sizeof(char));
	memcpy(temp->content_buf,data,data_len);
	/* 首先遍历所有的队列查看对应的串口队列是否存在 */
	for(i = 0; i < MAX_QUEUE_NUM; i++){
		if(server_array_queue[i].empty_queue == 1){
			continue;
		}
		if(server_array_queue[i].serial_no== serial_no){//找到了串口对应的队列
			queue_index = i;
			break;
		}
	}
	/* 对应的串口队列不存在,在所有的队列数组中找到可用的位置添加进去 */
	if(queue_index == -1){
		//printf("queue is not exist\n\r");
		for(i = 0; i < MAX_QUEUE_NUM;i++ ){
			if(server_array_queue[i].empty_queue == 1){  //找到可用的队列位置
				server_array_queue[i].empty_queue = 0;
				/* 创建一个新的队列 */
				server_array_queue[i].queue = (struct serial_queue*)malloc(sizeof(struct serial_queue));
				server_array_queue[i].queue->head = NULL;
				server_array_queue[i].queue->tail = NULL;
				server_array_queue[i].serial_no = serial_no;
				queue_index = i;
				//printf("create new queue sucessful\n\r");
				break;
			}
		}
	}

	if(queue_index == -1){
		printf("queue is full,no avaliable queue\n\r");
		return;
	}
	/* 添加数据到队列 */
	addQueueNode(server_array_queue[queue_index].queue,temp);
	server_queue_all_length += temp->content_length;
	//printf("add to serial server queue total length is %d\n\r",server_queue_all_length);
}
/* 添加队列到客户端队列中 */
void addDataToClientQueue(uint8_t *data,uint32_t data_len,uint8_t serial_no){
	int i;
	int queue_index = -1;
	struct queue_node *temp;
	temp = (struct queue_node *)malloc(sizeof(struct queue_node));
	//strcpy(temp->remote_ip,remote_ip);
	//temp->remote_port = remote_port;
	//temp->serial_no = serial_no;
	temp->content_length = data_len;
	temp->content_buf = (uint8_t*)malloc(data_len);
	memset(temp->content_buf,0,data_len);
	memcpy(temp->content_buf,data,data_len);
	//printf("*****add data to client queue,data content is\n\r \n\rlength is %d*******\n\r",temp->content_length);
	//printf("*****add data to client queue,data content is\n\r %s\n\rlength is %d*******\n\r",temp->content_buf,temp->content_length);
	/* 首先遍历所有的队列查看对应的串口队列是否存在 */
	for(i = 0; i < MAX_QUEUE_NUM; i++){
		if(client_array_queue[i].empty_queue == 1){
			continue;
		}
		if(client_array_queue[i].serial_no== serial_no){//找到了串口对应的队列
			queue_index = i;
			break;
		}
	}
	/* 对应的串口队列不存在,在所有的队列数组中找到可用的位置添加进去 */
	if(queue_index == -1){
		for(i = 0; i < MAX_QUEUE_NUM;i++ ){
			if(client_array_queue[i].empty_queue == 1){  //找到可用的队列位置
				client_array_queue[i].empty_queue = 0;
				/* 创建一个新的队列 */
				client_array_queue[i].queue = (struct serial_queue*)malloc(sizeof(struct serial_queue));
				client_array_queue[i].queue->head = NULL;
				client_array_queue[i].queue->tail = NULL;
				client_array_queue[i].serial_no = serial_no;
				queue_index = i;
				break;
			}
		}
	}

	if(queue_index == -1){
		printf("queue is full,no avaliable queue\n\r");
		return;
	}
	/* 添加数据到队列 */
	addQueueNode(client_array_queue[queue_index].queue,temp);
}
/* 获取对应串口的数据,返回值是动态分配的空间，调用该函数之后需要释放返回值的空间 */
char* getServerSerialData(uint8_t serial_no,uint32_t *data_length){
	//int serial_no;
	int i;
	int queue_index = -1;
	char *get_content;
	//char get_content[MAX_BUF_LENGTH];
	//memset(get_content,0,sizeof(get_content));
	for(i = 0; i < MAX_QUEUE_NUM; i++){
		if(server_array_queue[i].empty_queue == 1){
			continue;
		}
		if(server_array_queue[i].serial_no == serial_no){
			queue_index = i;
			break;
		}
	}
	if(queue_index == -1){
		//printf("serial queue is not exist\n\r");
		get_content = NULL;
		return NULL;
	}
	/* 判断该队列中的数据是否已经取完,如果取完则把对应的队列置空,循环利用 */
	if(server_array_queue[queue_index].queue->head == NULL){
		//printf("server queue is empty\n\r");
		server_array_queue[queue_index].empty_queue = 1;
		free(server_array_queue[queue_index].queue);
		server_array_queue[queue_index].queue = NULL;
		
		get_content = NULL;
		return NULL;
	}
	get_content = getQueueData(server_array_queue[queue_index].queue,data_length);
	//printf("get content from server serial is \n\r%s\n\r",get_content);
	return get_content;
}
char* getClientSerialData(uint8_t serial_no,uint32_t *data_length){
	int i;
	int queue_index = -1;
	char *get_content;
	//char get_content[MAX_BUF_LENGTH];
	//memset(get_content,0,sizeof(get_content));
	for(i = 0; i < MAX_QUEUE_NUM; i++){
		if(client_array_queue[i].empty_queue == 1){
			continue;
		}
		if(client_array_queue[i].serial_no == serial_no){
			queue_index = i;
			break;
		}
	}
	if(queue_index == -1){
		printf("该串口客户端中对应的队列不存在\n");
		return NULL;
	}
	
	/* 判断该队列中的数据是否已经取完,如果取完则把对应的队列置空,循环利用 */
	if(client_array_queue[queue_index].queue->head == NULL){
		free(client_array_queue[queue_index].queue);
		client_array_queue[queue_index].queue = NULL;
		client_array_queue[queue_index].empty_queue = 1;
		get_content = NULL;
		*data_length = 0;
		return NULL; 
	}
	get_content = getQueueData(client_array_queue[queue_index].queue,data_length);
	//printf("get content  from client serial is  \n\r%s\n\r",get_content);
	return get_content;
}

char *getSerialConfig(uint8_t serial_no){
	int i;
	static char serial_config_data[1324];
	char serial_ports[300];
	char temp_serial[15];
	//char system_ports[100];
	//char temp_system[15];
	char remote_config[1024];
	char temp_remote[50];
	
	char local_serial[100];
	
	memset(serial_config_data,0,sizeof(serial_config_data));
	memset(serial_ports,0,sizeof(serial_ports));
	//memset(system_ports,0,sizeof(system_ports));
	memset(remote_config,0,sizeof(remote_config));
	/* 生成串口占用的端口号 */
	for(i = 0;i < MAX_SERIAL_NUM; i++){
		//printf("serial port is %u\n\r",board.serial_config[i].serial_listen_port);
		memset(temp_serial,0,sizeof(temp_serial));
		sprintf(temp_serial,"%u/",board.serial_config[i].serial_listen_port);
		strcat(serial_ports,temp_serial);
	}
	
	/* 生成某个串口对应的本地配置参数 */
	sprintf(local_serial,"%d/%d/%d/%d/%.1f/%d/",board.serial_config[serial_no].serial_mode,
			board.serial_config[serial_no].serial_bound_rate,board.serial_config[serial_no].serial_data_bit,
			board.serial_config[serial_no].serial_parity,board.serial_config[serial_no].serial_stop_bit,
			ntohs(board.serial_config[serial_no].serial_listen_port));
	//printf("generate local config finish\n\rvalue is %s\n\r",local_serial);
	strcat(serial_ports,local_serial);
	for(i = 0; i < MAX_SERIAL_REMOTE_NUM; i++){
		memset(temp_remote,0,sizeof(temp_remote));
		if(board.serial_remote_host[i].end == 1){
			break;
		}
		sprintf(temp_remote,"%s/%d/%d|",board.serial_remote_host[i].remote_ip,
			ntohs(board.serial_remote_host[i].remote_port),(board.serial_remote_host[i].serial_no + 1));
		strcat(remote_config,temp_remote);
	}
	serial_ports[strlen(serial_ports) - 1] = '|'; //添加|分隔符
	strcat(serial_config_data,serial_ports);
	//strcat(serial_config_data,system_ports);
	strcat(serial_config_data,remote_config);
	printf("generate data is %s\n\r",serial_config_data);
	return serial_config_data;
}
int isSerialListenPort(uint16_t port){
	int i;
	for(i = 0; i < MAX_SERIAL_NUM;i++){
		if(board.serial_config[i].serial_listen_port == port){
			return 1;
		}
	}
	return 0;
}
int modifySerialConfig(char *form_content){
	int i;
	int add_ret;
	int modify_result;
	char *form_content_start = NULL;  //得到表单数据开始的位置
	char *isConfigLocalServer = NULL;  //判断用户是否需要配置本地serial
	char *serial_no_value = NULL;    //本地的串口号
	char *serial_mode_value = NULL;    //串口模式
	char *serial_bound_rate = NULL;     //串口波特率
	char *serial_data_bit = NULL;      //串口数据位
	char *serial_parity = NULL;        //串口的校验
	char *serial_stop_bit = NULL;      //串口的停止位
	char *serial_listen_port = NULL;    //串口的监听端口号
	
	char delete_name[15];     //删除的参数名称
	char *delete_value = NULL;       //删除选项是否选择
	char remote_ip_name[20];  //远端IP地址的参数名称
	char *remote_ip_value = NULL;    //远端IP数值
	char remote_port_name[20];  //远端的端口参数名称
	char *remote_port_value = NULL;   //远端的端口的数值
	char remote_serial_no_name[20];   //要和远端通信的串口号对应的参数名称
	char *remote_serial_no_value = NULL;     //要和远端通信的串口号对应的数值
	
	form_content_start = getHttpFormStartLocation(form_content);
	/* 得到本地串口配置相关的数据 */
	isConfigLocalServer = getParameter(form_content_start,"isConfigSerial");
	if(atoi(isConfigLocalServer) == 1){ //需要配置本地串口参数
		serial_no_value = getParameter(form_content_start,"ableSerialNo");
		serial_mode_value = getParameter(form_content_start,"serial_mode");
		serial_bound_rate = getParameter(form_content_start,"bound_rate");
		serial_data_bit = getParameter(form_content_start,"data_bit");
		serial_parity = getParameter(form_content_start,"parity");
		serial_stop_bit = getParameter(form_content_start,"stop_bit");
		serial_listen_port = getParameter(form_content_start,"listen_serial_no");
		/* 更新本地串口参数的配置 */
		modify_result = modifyLocalSerialConfig((atoi(serial_no_value) - 1),atoi(serial_mode_value),atoi(serial_bound_rate),
								atoi(serial_data_bit),atoi(serial_parity),atof(serial_stop_bit),
								atoi(serial_listen_port));
		
		if(modify_result){
			printf("modify local serial config sucessful\n\r");
		}
			/*释放动态开辟的空间*/
	freeMemory(serial_no_value);
	freeMemory(serial_mode_value);
	freeMemory(serial_bound_rate);
	freeMemory(serial_data_bit);
	freeMemory(serial_parity);
	freeMemory(serial_stop_bit);
	freeMemory(serial_listen_port);
	
	freeMemory(isConfigLocalServer);
	}
	
	/* 得到远端配置的信息 */
	for(i = 0; i < MAX_SERIAL_REMOTE_NUM; i++){
		memset(delete_name,0,sizeof(delete_name));
		memset(remote_ip_name,0,sizeof(remote_ip_name));
		memset(remote_port_name,0,sizeof(remote_port_name));
		memset(remote_serial_no_name,0,sizeof(remote_serial_no_name));
		
		sprintf(remote_ip_name,"remote_ip_%d",(i + 1));
		remote_ip_value = getParameter(form_content_start,remote_ip_name);
		
		if( !remote_ip_value){ 
			free(remote_ip_value);
			break;
		}
		sprintf(delete_name,"Delete_%d",(i + 1));
		delete_value = getParameter(form_content_start,delete_name);
		sprintf(remote_port_name,"remote_port_%d",(i + 1));
		remote_port_value = getParameter(form_content_start,remote_port_name);
		sprintf(remote_serial_no_name,"serial_no_%d",(i + 1));
		remote_serial_no_value = getParameter(form_content_start,remote_serial_no_name);
		
		if(delete_value){  //删除当前配置
			deleteSerialRemoteEntry(remote_ip_value,atoi(remote_port_value),(atoi(remote_serial_no_value) - 1));
			freeMemory(delete_value);
			freeMemory(remote_ip_value);
			freeMemory(remote_port_value);
			freeMemory(remote_serial_no_value);
			continue;
		}
		printf("get remote ip value is %s\n\r",remote_ip_value);
		printf("get remote port value  is %s\n\r",remote_port_value);
		printf("get remote serial no value is %s\n\r",remote_serial_no_value);
		/* 添加新创建的项到board数组中 */
		if(isExistRemoteConfig(remote_ip_value,atoi(remote_port_value),(atoi(remote_serial_no_value) - 1))){ //该选项已经存在，跳过，继续
			freeMemory(delete_value);
			freeMemory(remote_ip_value);
			freeMemory(remote_port_value);
			freeMemory(remote_serial_no_value);
			continue;
		}
		//不存在该配置，则添加到数组中
		add_ret = addRemoteConfig(remote_ip_value,atoi(remote_port_value),(atoi(remote_serial_no_value) - 1));
		if(!add_ret){
			printf("添加失败，没有可用的空间");
		}
		freeMemory(delete_value);
		freeMemory(remote_ip_value);
		freeMemory(remote_port_value);
		freeMemory(remote_serial_no_value);
	}
	
	return 0;
}
/* 从board中删除远端配置的项 */
int deleteSerialRemoteEntry(char *remote_ip,uint16_t remote_port,uint8_t serial_no){
	int i,j;
	int isDelete = 0;
	for(i = 0; i < MAX_SERIAL_REMOTE_NUM; i++){
		if(board.serial_remote_host[i].end == 1){
			printf("delete entry no exist\n\r");
			break;
		}
		if( !strcmp(board.serial_remote_host[i].remote_ip,remote_ip)
			&& board.serial_remote_host[i].remote_port == HTONS(remote_port)
			&& board.serial_remote_host[i].serial_no == serial_no
		){  //找到要删除的项
			for(j = i; j < MAX_SERIAL_REMOTE_NUM - 1; j++){
				/* 判断下一项是否为空,如果为空则置空该项结束 */
				if(board.serial_remote_host[j + 1].end == 1){
					board.serial_remote_host[j].end = 1;
					isDelete = 1;
					break;
				}
				strcpy(board.serial_remote_host[j].remote_ip,board.serial_remote_host[j + 1].remote_ip);
				board.serial_remote_host[j].remote_port = board.serial_remote_host[j + 1].remote_port;
				board.serial_remote_host[j].serial_no = board.serial_remote_host[j + 1].serial_no;
				board.serial_remote_host[j].end = 0;
			}
		}
		if(isDelete){
			break;
		}
	}
	if( !isDelete){
		printf("delete serial remote config failed\n\r");
	}
	return 1;
}
/* 判断远端的配置是否已经存在,返回值1代表存在，0代表不存在 */
int isExistRemoteConfig(char *remote_ip,uint16_t remote_port,uint8_t serial_no){
	int i;
	printf("remote ip is %s;port is %d;serial no is %d\n\r",remote_ip,remote_port,serial_no);
	for(i = 0; i < MAX_SERIAL_REMOTE_NUM; i++){
		if(board.serial_remote_host[i].end == 1){  //该条件已经说明不存在该配置,可以直接返回
			break;
		}
		if( !strcmp(board.serial_remote_host[i].remote_ip,remote_ip)
			&& board.serial_remote_host[i].remote_port == HTONS(remote_port)
			&& board.serial_remote_host[i].serial_no == serial_no
		){    //找到相同的选项
			printf("find same entry\n\r");
			return 1;
		}
		
	}
	printf("no exist remote entry\n\r");
	return 0;
}
/* 向结构体数组中添加新的配置项，返回值为0代表添加失败，表项已经满了，返回1代表添加成功 */
int addRemoteConfig(char *remote_ip,uint16_t remote_port,uint8_t serial_no){
	int i;
	for(i = 0; i < MAX_SERIAL_REMOTE_NUM; i++){
		if(board.serial_remote_host[i].end == 1){ //找到可用的空间
			if(i != MAX_SERIAL_REMOTE_NUM - 1 ){  //如果找到的不是最后一个空位
				board.serial_remote_host[i + 1].end = 1;
			}
			board.serial_remote_host[i].end = 0;
			strcpy(board.serial_remote_host[i].remote_ip,remote_ip);
			board.serial_remote_host[i].remote_port = HTONS(remote_port);
			board.serial_remote_host[i].serial_no = serial_no;
			return 1;
		}
	}
	printf("add remote host sucessful\n\r");
	return 0;
}
int modifyLocalSerialConfig(uint8_t serial_no,uint16_t serial_mode,uint32_t serial_bound_rate,
							uint8_t serial_data_bit,uint8_t serial_parity,float serial_stop_bit,
							uint16_t serial_listen_port){
	//printf("modify serial no is %d\n\r",serial_no);
	if(board.serial_config[serial_no].serial_mode != serial_mode){
		board.serial_config[serial_no].serial_mode = serial_mode;
		//printf("serial mode different\n\r");
	}
	if(board.serial_config[serial_no].serial_bound_rate != serial_bound_rate){
		board.serial_config[serial_no].serial_bound_rate = serial_bound_rate;
		//printf("serial bound rate different\n\r");
	}
	if(board.serial_config[serial_no].serial_data_bit != serial_data_bit){
		board.serial_config[serial_no].serial_data_bit = serial_data_bit;
		//printf("serial data_bit different\n\r");
	}
	
	if(board.serial_config[serial_no].serial_parity != serial_parity){
		board.serial_config[serial_no].serial_parity = serial_parity;
		//printf("serial parity different\n\r");
	}
	
	if(board.serial_config[serial_no].serial_stop_bit != serial_stop_bit){
		board.serial_config[serial_no].serial_stop_bit = serial_stop_bit;
		//printf("serial stop_bit different\n\r");
	}
	if(board.serial_config[serial_no].serial_listen_port != HTONS(serial_listen_port)){
		/* 如果之前监听过该端口应该先把之前的监听取消 */
		if(board.serial_config[serial_no].serial_listen_port != 0){
			uip_unlisten(board.serial_config[serial_no].serial_listen_port);
		}
		board.serial_config[serial_no].serial_listen_port = HTONS(serial_listen_port);
		/* 把新的监听端口添加到监听队列 */
		addSerialServerListen(HTONS(serial_listen_port));
		//printf("serial listen_port different\n\r");
	}
	return 1;
}

/* 读取指定数据长度的数据到buf中,返回实际读取的长度 */
int readClientQueueToBuf(char *buf,int length,uint8_t serial_no){
	char *read_loc = NULL;  //位置指针
	int read_length = 0; //读取的长度
	int isQueueEmpty = 0;
	//int left_length = strlen(queue_data);
	//read_loc = buf;
	char *serial_client_data = NULL;  //存放读到的数据	
	uint32_t data_length = 0;  //读到队列中的数据长度
	do{
		read_loc = &buf[read_length];
		serial_client_data = getClientSerialData(serial_no,&data_length);
		memcpy(read_loc,serial_client_data,data_length);
		read_length += data_length;
		if( !serial_client_data){
			isQueueEmpty = 1;
		}
		free(serial_client_data);
		serial_client_data = NULL;
		data_length = 0;
	}while( !isQueueEmpty && read_length < length);

	return read_length;
}
